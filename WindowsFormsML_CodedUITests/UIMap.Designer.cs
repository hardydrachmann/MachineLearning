// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace WindowsFormsML_CodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbGenreIsReset - Use 'AssertMethod_btnCalculate_lbGenreIsResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbGenreIsReset()
        {
            #region Variable Declarations
            WinText uIIngendataersendttilmText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow1.UIIngendataersendttilmText;
            #endregion

            // Verify that the 'DisplayText' property of 'Ingen data er sendt til modellen endnu...' label starts with 'Ingen'
            StringAssert.StartsWith(uIIngendataersendttilmText.DisplayText, this.AssertMethod_btnCalculate_lbGenreIsResetExpectedValues.UIIngendataersendttilmTextDisplayText);
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbGenreNotDefaultValue - Use 'AssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbGenreNotDefaultValue()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText1 = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow1.UIScoredProbabilitiesfText1;
            #endregion

            // Verify that the 'DisplayText' property of 'Scored Probabilities for Class Action: 1, Scored ...' label is not equal to 'Ingen data er sendt til modellen endnu...'
            Assert.AreNotEqual(this.AssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues.UIScoredProbabilitiesfText1DisplayText, uIScoredProbabilitiesfText1.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbGenreNotEmptyString - Use 'AssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbGenreNotEmptyString()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow1.UIScoredProbabilitiesfText;
            #endregion

            // Verify that the 'DisplayText' property of 'Scored Probabilities for Class Action: 0.05061298...' label is not equal to ''
            Assert.AreNotEqual(this.AssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues.UIScoredProbabilitiesfTextDisplayText, uIScoredProbabilitiesfText.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbMovieIsNotReset - Use 'AssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbMovieIsNotReset()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText1 = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIScoredProbabilitiesfText1;
            #endregion

            // Verify that the 'DisplayText' property of 'Scored Probabilities for Class 12 Years A Slave: ...' label is not equal to 'Ingen data er sendt til modellen endnu...'
            Assert.AreNotEqual(this.AssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues.UIScoredProbabilitiesfText1DisplayText, uIScoredProbabilitiesfText1.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbMovieIsReset - Use 'AssertMethod_btnCalculate_lbMovieIsResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbMovieIsReset()
        {
            #region Variable Declarations
            WinText uIIngendataersendttilmText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIIngendataersendttilmText;
            #endregion

            // Verify that the 'DisplayText' property of 'Ingen data er sendt til modellen endnu...' label starts with 'Ingen'
            StringAssert.StartsWith(uIIngendataersendttilmText.DisplayText, this.AssertMethod_btnCalculate_lbMovieIsResetExpectedValues.UIIngendataersendttilmTextDisplayText);
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbMovieNotDefaultValue - Use 'AssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbMovieNotDefaultValue()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText1 = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIScoredProbabilitiesfText1;
            #endregion

            // Verify that the 'DisplayText' property of 'Scored Probabilities for Class 12 Years A Slave: ...' label is not equal to 'Ingen data er sendt til modellen endnu...'
            Assert.AreNotEqual(this.AssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues.UIScoredProbabilitiesfText1DisplayText, uIScoredProbabilitiesfText1.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbMovieNotEmptyString - Use 'AssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbMovieNotEmptyString()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIScoredProbabilitiesfText;
            #endregion

            // Verify that the 'DisplayText' property of 'Scored Probabilities for Class 12 Years A Slave: ...' label is not equal to ''
            Assert.AreNotEqual(this.AssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues.UIScoredProbabilitiesfTextDisplayText, uIScoredProbabilitiesfText.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_PopulatelbMovie - Use 'AssertMethod_btnCalculate_PopulatelbMovieExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_PopulatelbMovie()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIScoredProbabilitiesfText;
            #endregion

            // Verify that the 'DisplayText' property of 'Scored Probabilities for Class 12 Years A Slave: ...' label equals ' 
            //  
            //    Scored Probabilities for Class 12 Years A Slave: 0,
            //    Scored Probabilities for Class 2001: A Space Odyssey: 0,
            //    Scored Probabilities for Class A Girl Walks Home Alone At Night: 0,
            //    Scored Probabilities for Class Aliens: 0,
            //    Scored Probabilities for Class Avengers: Infinity War: 0,
            //    Scored Probabilities for Class Blade Runner: 0,
            //    Scored Probabilities for Class Casablanca: 0,
            //    Scored Probabilities for Class Chicago: 0,
            //    Scored Probabilities for Class Citizen Kane: 0,
            //    Scored Probabilities for Class City Of Angels: 0,
            //    Scored Probabilities for Class Die Hard: 0,
            //    Scored Probabilities for Class Don't Knock Twice: 0.570124831309042,
            //    Scored Probabilities for Class Dr. Doolittle: 0,
            //    Scored Probabilities for Class Enough Said: 0,
            //    Scored Probabilities for Class Four Weddings And A Funeral: 0,
            //    Scored Probabilities for Class Gimme Shelter: 0,
            //    Scored Probabilities for Class Gone In 60 Seconds: 0,
            //    Scored Probabilities for Class Gravity: 0,
            //    Scored Probabilities for Class Hairspray: 0,
            //    Scored Probabilities for Class Hoop Dreams: 0,
            //    Scored Probabilities for Class Interstellar: 0,
            //    Scored Probabilities for Class Lights Out: 0.0741898148148148,
            //    Scored Probabilities for Class Man On Wire: 0,
            //    Scored Probabilities for Class Memento: 0,
            //    Scored Probabilities for Class Metropolis: 0,
            //    Scored Probabilities for Class Office Space: 0,
            //    Scored Probabilities for Class Oldboy: 0,
            //    Scored Probabilities for Class Passenger 57: 0,
            //    Scored Probabilities for Class Psycho: 0,
            //    Scored Probabilities for Class Se7en: 0,
            //    Scored Probabilities for Class Shine A Light: 0,
            //    Scored Probabilities for Class Singin' In The Rain: 0,
            //    Scored Probabilities for Class Stop Making Sense: 0,
            //    Scored Probabilities for Class The Act Of Killing: 0,
            //    Scored Probabilities for Class The Cove: 0,
            //    Scored Probabilities for Class The Fast & The Furious: 0,
            //    Scored Probabilities for Class The Grudge: 0.20273091'
            Assert.AreEqual(this.AssertMethod_btnCalculate_PopulatelbMovieExpectedValues.UIScoredProbabilitiesfTextDisplayText, uIScoredProbabilitiesfText.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod_btnReset_lbGenreIsReset - Use 'AssertMethod_btnReset_lbGenreIsResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnReset_lbGenreIsReset()
        {
            #region Variable Declarations
            WinText uIIngendataersendttilmText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow1.UIIngendataersendttilmText;
            #endregion

            // Verify that the 'Height' property of 'Ingen data er sendt til modellen endnu...' label equals '20'
            Assert.AreEqual(this.AssertMethod_btnReset_lbGenreIsResetExpectedValues.UIIngendataersendttilmTextHeight, uIIngendataersendttilmText.Height);
        }
        
        /// <summary>
        /// AssertMethod_btnReset_lbMovieIsReset - Use 'AssertMethod_btnReset_lbMovieIsResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnReset_lbMovieIsReset()
        {
            #region Variable Declarations
            WinText uIIngendataersendttilmText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIIngendataersendttilmText;
            #endregion

            // Verify that the 'Height' property of 'Ingen data er sendt til modellen endnu...' label equals '20'
            Assert.AreEqual(this.AssertMethod_btnReset_lbMovieIsResetExpectedValues.UIIngendataersendttilmTextHeight, uIIngendataersendttilmText.Height);
        }
        
        /// <summary>
        /// AssertMethod_btnReset_tbBirthYearIsReset - Use 'AssertMethod_btnReset_tbBirthYearIsResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnReset_tbBirthYearIsReset()
        {
            #region Variable Declarations
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Verify that the 'Text' property of 'tbBirthYear' text box equals ''
            Assert.AreEqual(this.AssertMethod_btnReset_tbBirthYearIsResetExpectedValues.UITbBirthYearEditText, uITbBirthYearEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod_btnUpdate_cbClubMemberIsPopulated - Use 'AssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnUpdate_cbClubMemberIsPopulated()
        {
            #region Variable Declarations
            WinComboBox uISandsynlighederComboBox = this.UIMachineLearningWindow.UICbClubMemberWindow.UISandsynlighederComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'Sandsynligheder' combo box equals 'Ja'
            Assert.AreEqual(this.AssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues.UISandsynlighederComboBoxSelectedItem, uISandsynlighederComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_btnUpdate_cbGenreIsPopulated - Use 'AssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnUpdate_cbGenreIsPopulated()
        {
            #region Variable Declarations
            WinComboBox uICbGenreComboBox = this.UIMachineLearningWindow.UICbGenreWindow.UICbGenreComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'cbGenre' combo box equals 'Action'
            Assert.AreEqual(this.AssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues.UICbGenreComboBoxSelectedItem, uICbGenreComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_btnUpdate_cbMovieIsPopulated - Use 'AssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnUpdate_cbMovieIsPopulated()
        {
            #region Variable Declarations
            WinComboBox uICbMovieComboBox = this.UIMachineLearningWindow.UICbMovieWindow.UICbMovieComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'cbMovie' combo box equals 'Passenger 57'
            Assert.AreEqual(this.AssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues.UICbMovieComboBoxSelectedItem, uICbMovieComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_btnUpdate_cbSexIsPopulated - Use 'AssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnUpdate_cbSexIsPopulated()
        {
            #region Variable Declarations
            WinComboBox uICbSexComboBox = this.UIMachineLearningWindow.UICbSexWindow.UICbSexComboBox;
            #endregion

            // Wait for 5 seconds for user delay between actions; Verify that the 'SelectedItem' property of 'cbSex' combo box equals 'Mand'
            Playback.Wait(5000);
            Assert.AreEqual(this.AssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues.UICbSexComboBoxSelectedItem, uICbSexComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatus - Use 'AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatus()
        {
            #region Variable Declarations
            WinComboBox uISandsynlighederComboBox = this.UIMachineLearningWindow.UICbClubMemberWindow.UISandsynlighederComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'Sandsynligheder' combo box equals 'Ja'
            Assert.AreEqual(this.AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues.UISandsynlighederComboBoxSelectedItem, uISandsynlighederComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatus - Use 'AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatus()
        {
            #region Variable Declarations
            WinComboBox uISandsynlighederComboBox = this.UIMachineLearningWindow.UICbClubMemberWindow.UISandsynlighederComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'Sandsynligheder' combo box is not equal to 'Ja'
            Assert.AreNotEqual(this.AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues.UISandsynlighederComboBoxSelectedItem, uISandsynlighederComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_cbGenre_HasCorrectSelectedGenre - Use 'AssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbGenre_HasCorrectSelectedGenre()
        {
            #region Variable Declarations
            WinComboBox uICbGenreComboBox = this.UIMachineLearningWindow.UICbGenreWindow.UICbGenreComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'cbGenre' combo box equals 'Drama'
            Assert.AreEqual(this.AssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues.UICbGenreComboBoxSelectedItem, uICbGenreComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_cbGenre_HasIncorrectSelectedGenre - Use 'AssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbGenre_HasIncorrectSelectedGenre()
        {
            #region Variable Declarations
            WinComboBox uICbGenreComboBox = this.UIMachineLearningWindow.UICbGenreWindow.UICbGenreComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'cbGenre' combo box is not equal to 'Drama'
            Assert.AreNotEqual(this.AssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues.UICbGenreComboBoxSelectedItem, uICbGenreComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_cbIncludeMovies_CheckBoxIsChecked - Use 'AssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbIncludeMovies_CheckBoxIsChecked()
        {
            #region Variable Declarations
            WinCheckBox uIInkluderFilmCheckBox = this.UIMachineLearningWindow.UIInkluderFilmWindow.UIInkluderFilmCheckBox;
            #endregion

            // Verify that the 'Checked' property of 'Inkluder Film' check box equals 'True'
            Assert.AreEqual(this.AssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues.UIInkluderFilmCheckBoxChecked, uIInkluderFilmCheckBox.Checked);
        }
        
        /// <summary>
        /// AssertMethod_cbIncludeMovies_CheckBoxIsUnchecked - Use 'AssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbIncludeMovies_CheckBoxIsUnchecked()
        {
            #region Variable Declarations
            WinCheckBox uIInkluderFilmCheckBox = this.UIMachineLearningWindow.UIInkluderFilmWindow.UIInkluderFilmCheckBox;
            #endregion

            // Verify that the 'Checked' property of 'Inkluder Film' check box equals 'False'
            Assert.AreEqual(this.AssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues.UIInkluderFilmCheckBoxChecked, uIInkluderFilmCheckBox.Checked);
        }
        
        /// <summary>
        /// AssertMethod_cbMovie_ComboBoxIsDisenabled - Use 'AssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbMovie_ComboBoxIsDisenabled()
        {
            #region Variable Declarations
            WinComboBox uICbMovieComboBox = this.UIMachineLearningWindow.UICbMovieWindow.UICbMovieComboBox;
            #endregion

            // Verify that the 'Enabled' property of 'cbMovie' combo box equals 'False'
            Assert.AreEqual(this.AssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues.UICbMovieComboBoxEnabled, uICbMovieComboBox.Enabled);
        }
        
        /// <summary>
        /// AssertMethod_cbMovie_ComboBoxIsEnabled - Use 'AssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbMovie_ComboBoxIsEnabled()
        {
            #region Variable Declarations
            WinComboBox uICbMovieComboBox = this.UIMachineLearningWindow.UICbMovieWindow.UICbMovieComboBox;
            #endregion

            // Verify that the 'Enabled' property of 'cbMovie' combo box equals 'True'
            Assert.AreEqual(this.AssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues.UICbMovieComboBoxEnabled, uICbMovieComboBox.Enabled);
        }
        
        /// <summary>
        /// AssertMethod_cbMovie_HasCorrectSelectedMovie - Use 'AssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbMovie_HasCorrectSelectedMovie()
        {
            #region Variable Declarations
            WinComboBox uICbMovieComboBox = this.UIMachineLearningWindow.UICbMovieWindow.UICbMovieComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'cbMovie' combo box equals 'Dr. Doolittle'
            Assert.AreEqual(this.AssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues.UICbMovieComboBoxSelectedItem, uICbMovieComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_cbMovie_HasIncorrectSelectedMovie - Use 'AssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbMovie_HasIncorrectSelectedMovie()
        {
            #region Variable Declarations
            WinComboBox uICbMovieComboBox = this.UIMachineLearningWindow.UICbMovieWindow.UICbMovieComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'cbMovie' combo box is not equal to 'Dr. Doolittle'
            Assert.AreNotEqual(this.AssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues.UICbMovieComboBoxSelectedItem, uICbMovieComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_cbSex_HasCorrectSelectedSex - Use 'AssertMethod_cbSex_HasCorrectSelectedSexExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbSex_HasCorrectSelectedSex()
        {
            #region Variable Declarations
            WinComboBox uICbSexComboBox = this.UIMachineLearningWindow.UICbSexWindow.UICbSexComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'cbSex' combo box equals 'Mand'
            Assert.AreEqual(this.AssertMethod_cbSex_HasCorrectSelectedSexExpectedValues.UICbSexComboBoxSelectedItem, uICbSexComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_cbSex_HasIncorrectSelectedSex - Use 'AssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_cbSex_HasIncorrectSelectedSex()
        {
            #region Variable Declarations
            WinComboBox uICbSexComboBox = this.UIMachineLearningWindow.UICbSexWindow.UICbSexComboBox;
            #endregion

            // Verify that the 'SelectedItem' property of 'cbSex' combo box is not equal to 'Mand'
            Assert.AreNotEqual(this.AssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues.UICbSexComboBoxSelectedItem, uICbSexComboBox.SelectedItem);
        }
        
        /// <summary>
        /// AssertMethod_tabControl1_lbGenreIsReset - Use 'AssertMethod_tabControl1_lbGenreIsResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_tabControl1_lbGenreIsReset()
        {
            #region Variable Declarations
            WinText uIIngendataersendttilmText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow1.UIIngendataersendttilmText;
            #endregion

            // Verify that the 'DisplayText' property of 'Ingen data er sendt til modellen endnu...' label equals 'Ingen data er sendt til modellen endnu...'
            Assert.AreEqual(this.AssertMethod_tabControl1_lbGenreIsResetExpectedValues.UIIngendataersendttilmTextDisplayText, uIIngendataersendttilmText.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod_tabControl1_lbMovieIsReset - Use 'AssertMethod_tabControl1_lbMovieIsResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_tabControl1_lbMovieIsReset()
        {
            #region Variable Declarations
            WinText uIIngendataersendttilmText = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIIngendataersendttilmText;
            #endregion

            // Verify that the 'DisplayText' property of 'Ingen data er sendt til modellen endnu...' label equals 'Ingen data er sendt til modellen endnu...'
            Assert.AreEqual(this.AssertMethod_tabControl1_lbMovieIsResetExpectedValues.UIIngendataersendttilmTextDisplayText, uIIngendataersendttilmText.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod_tbBirthYear_HasCorrectYearInput - Use 'AssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_tbBirthYear_HasCorrectYearInput()
        {
            #region Variable Declarations
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Verify that the 'Text' property of 'tbBirthYear' text box equals '2000'
            Assert.AreEqual(this.AssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues.UITbBirthYearEditText, uITbBirthYearEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod_tbBirthYear_HasEmptyString - Use 'AssertMethod_tbBirthYear_HasEmptyStringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_tbBirthYear_HasEmptyString()
        {
            #region Variable Declarations
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Verify that the 'Text' property of 'tbBirthYear' text box equals ''
            Assert.AreEqual(this.AssertMethod_tbBirthYear_HasEmptyStringExpectedValues.UITbBirthYearEditText, uITbBirthYearEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod_tbBirthYear_HasIncorrectYearInput - Use 'AssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_tbBirthYear_HasIncorrectYearInput()
        {
            #region Variable Declarations
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Verify that the 'Text' property of 'tbBirthYear' text box is not equal to '2000'
            Assert.AreNotEqual(this.AssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues.UITbBirthYearEditText, uITbBirthYearEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod_tbBirthYear_IsNotNull
        /// </summary>
        public void AssertMethod_tbBirthYear_IsNotNull()
        {
            #region Variable Declarations
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Verify that the 'Text' property of 'tbBirthYear' text box is not equal to 'null'
            Assert.IsNotNull(uITbBirthYearEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod_tbBirthYear_IsNotReadOnly - Use 'AssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_tbBirthYear_IsNotReadOnly()
        {
            #region Variable Declarations
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Verify that the 'ReadOnly' property of 'tbBirthYear' text box equals 'False'
            Assert.AreEqual(this.AssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues.UITbBirthYearEditReadOnly, uITbBirthYearEdit.ReadOnly);
        }
        
        /// <summary>
        /// RecordedMethod__cbIncludeMovies_ActivateCheckBox - Use 'RecordedMethod__cbIncludeMovies_ActivateCheckBoxParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod__cbIncludeMovies_ActivateCheckBox()
        {
            #region Variable Declarations
            WinCheckBox uIInkluderFilmCheckBox = this.UIMachineLearningWindow.UIInkluderFilmWindow.UIInkluderFilmCheckBox;
            #endregion

            // Select 'Inkluder Film' check box
            uIInkluderFilmCheckBox.Checked = this.RecordedMethod__cbIncludeMovies_ActivateCheckBoxParams.UIInkluderFilmCheckBoxChecked;
        }
        
        /// <summary>
        /// RecordedMethod__cbMovie_DisenableComboBox - Use 'RecordedMethod__cbMovie_DisenableComboBoxParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod__cbMovie_DisenableComboBox()
        {
            #region Variable Declarations
            WinCheckBox uIInkluderFilmCheckBox = this.UIMachineLearningWindow.UIInkluderFilmWindow.UIInkluderFilmCheckBox;
            #endregion

            // Clear 'Inkluder Film' check box
            uIInkluderFilmCheckBox.Checked = this.RecordedMethod__cbMovie_DisenableComboBoxParams.UIInkluderFilmCheckBoxChecked;
        }
        
        /// <summary>
        /// RecordedMethod__tbBirthYear_InputYear - Use 'RecordedMethod__tbBirthYear_InputYearParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod__tbBirthYear_InputYear()
        {
            #region Variable Declarations
            WinClient uIMachineLearningClient = this.UIMachineLearningWindow.UIMachineLearningClient;
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Click 'Machine Learning' client
            Mouse.Click(uIMachineLearningClient, new Point(282, 392));

            // Type '2000' in 'tbBirthYear' text box
            uITbBirthYearEdit.Text = this.RecordedMethod__tbBirthYear_InputYearParams.UITbBirthYearEditText;
        }
        
        /// <summary>
        /// RecordedMethod_btnCalculate_PopulatelbMovieAndlbGenre
        /// </summary>
        public void RecordedMethod_btnCalculate_PopulatelbMovieAndlbGenre()
        {
            #region Variable Declarations
            WinClient uIMachineLearningClient = this.UIMachineLearningWindow.UIMachineLearningClient;
            WinButton uIBeregnButton = this.UIMachineLearningWindow.UIBeregnWindow.UIBeregnButton;
            WinTabPage uIFilmTabPage = this.UIMachineLearningWindow.UIKlubmedlemTabList.UIFilmTabPage;
            #endregion

            // Click 'Machine Learning' client
            Mouse.Click(uIMachineLearningClient, new Point(266, 371));

            // Click 'Beregn' button
            Mouse.Click(uIBeregnButton, new Point(40, 13));

            // Wait for 25 seconds for user delay between actions; Click 'Film' tab
            Playback.Wait(25000);
            Mouse.Click(uIFilmTabPage, new Point(30, 11));
        }
        
        /// <summary>
        /// RecordedMethod_btnCalculate_SelectlbGenreOnTabControl
        /// </summary>
        public void RecordedMethod_btnCalculate_SelectlbGenreOnTabControl()
        {
            #region Variable Declarations
            WinTabPage uIGenreTabPage = this.UIMachineLearningWindow.UIKlubmedlemTabList.UIGenreTabPage;
            #endregion

            // Click 'Genre' tab
            Mouse.Click(uIGenreTabPage, new Point(23, 12));
        }
        
        /// <summary>
        /// RecordedMethod_btnCalculate_SelectlbMovieOnTabControl
        /// </summary>
        public void RecordedMethod_btnCalculate_SelectlbMovieOnTabControl()
        {
            #region Variable Declarations
            WinTabPage uIFilmTabPage = this.UIMachineLearningWindow.UIKlubmedlemTabList.UIFilmTabPage;
            #endregion

            // Click 'Film' tab
            Mouse.Click(uIFilmTabPage, new Point(21, 14));
        }
        
        /// <summary>
        /// RecordedMethod_btnReset_CleartbBirthYearAndlbMovieAndlbGenre
        /// </summary>
        public void RecordedMethod_btnReset_CleartbBirthYearAndlbMovieAndlbGenre()
        {
            #region Variable Declarations
            WinButton uINulstilButton = this.UIMachineLearningWindow.UINulstilWindow.UINulstilButton;
            #endregion

            // Click 'Nulstil' button
            Mouse.Click(uINulstilButton, new Point(18, 11));
        }
        
        /// <summary>
        /// RecordedMethod_btnReset_SelectlbGenreOnTabControl
        /// </summary>
        public void RecordedMethod_btnReset_SelectlbGenreOnTabControl()
        {
            #region Variable Declarations
            WinTabPage uIGenreTabPage = this.UIMachineLearningWindow.UIKlubmedlemTabList.UIGenreTabPage;
            #endregion

            // Click 'Genre' tab
            Mouse.Click(uIGenreTabPage, new Point(17, 6));
        }
        
        /// <summary>
        /// RecordedMethod_btnReset_SelectlbMovieOnTabControl
        /// </summary>
        public void RecordedMethod_btnReset_SelectlbMovieOnTabControl()
        {
            #region Variable Declarations
            WinTabPage uIFilmTabPage = this.UIMachineLearningWindow.UIKlubmedlemTabList.UIFilmTabPage;
            #endregion

            // Click 'Film' tab
            Mouse.Click(uIFilmTabPage, new Point(22, 13));
        }
        
        /// <summary>
        /// RecordedMethod_btnUpdate_ClearAndRepopulateAllComboBoxes
        /// </summary>
        public void RecordedMethod_btnUpdate_ClearAndRepopulateAllComboBoxes()
        {
            #region Variable Declarations
            WinButton uIOpdaterButton = this.UIMachineLearningWindow.UIOpdaterWindow.UIOpdaterButton;
            #endregion

            // Click 'Opdater' button
            Mouse.Click(uIOpdaterButton, new Point(29, 8));
        }
        
        /// <summary>
        /// RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatus - Use 'RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatus()
        {
            #region Variable Declarations
            WinComboBox uISandsynlighederComboBox = this.UIMachineLearningWindow.UICbClubMemberWindow.UISandsynlighederComboBox;
            #endregion

            // Select 'Nej' in 'Sandsynligheder' combo box
            uISandsynlighederComboBox.SelectedItem = this.RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams.UISandsynlighederComboBoxSelectedItem;
        }
        
        /// <summary>
        /// RecordedMethod_cbGenre_SelectCorrectGenre - Use 'RecordedMethod_cbGenre_SelectCorrectGenreParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_cbGenre_SelectCorrectGenre()
        {
            #region Variable Declarations
            WinComboBox uICbGenreComboBox = this.UIMachineLearningWindow.UICbGenreWindow.UICbGenreComboBox;
            #endregion

            // Select 'Drama' in 'cbGenre' combo box
            uICbGenreComboBox.SelectedItem = this.RecordedMethod_cbGenre_SelectCorrectGenreParams.UICbGenreComboBoxSelectedItem;
        }
        
        /// <summary>
        /// RecordedMethod_cbGenre_SelectIncorrectGenre - Use 'RecordedMethod_cbGenre_SelectIncorrectGenreParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_cbGenre_SelectIncorrectGenre()
        {
            #region Variable Declarations
            WinComboBox uICbGenreComboBox = this.UIMachineLearningWindow.UICbGenreWindow.UICbGenreComboBox;
            #endregion

            // Select 'Horror' in 'cbGenre' combo box
            uICbGenreComboBox.SelectedItem = this.RecordedMethod_cbGenre_SelectIncorrectGenreParams.UICbGenreComboBoxSelectedItem;
        }
        
        /// <summary>
        /// RecordedMethod_cbIncludeMovies_ActivateCheckBox - Use 'RecordedMethod_cbIncludeMovies_ActivateCheckBoxParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_cbIncludeMovies_ActivateCheckBox()
        {
            #region Variable Declarations
            WinCheckBox uIInkluderFilmCheckBox = this.UIMachineLearningWindow.UIInkluderFilmWindow.UIInkluderFilmCheckBox;
            #endregion

            // Select 'Inkluder Film' check box
            uIInkluderFilmCheckBox.Checked = this.RecordedMethod_cbIncludeMovies_ActivateCheckBoxParams.UIInkluderFilmCheckBoxChecked;
        }
        
        /// <summary>
        /// RecordedMethod_cbMovie_DisenableComboBox - Use 'RecordedMethod_cbMovie_DisenableComboBoxParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_cbMovie_DisenableComboBox()
        {
            #region Variable Declarations
            WinCheckBox uIInkluderFilmCheckBox = this.UIMachineLearningWindow.UIInkluderFilmWindow.UIInkluderFilmCheckBox;
            #endregion

            // Clear 'Inkluder Film' check box
            uIInkluderFilmCheckBox.Checked = this.RecordedMethod_cbMovie_DisenableComboBoxParams.UIInkluderFilmCheckBoxChecked;
        }
        
        /// <summary>
        /// RecordedMethod_cbMovie_SelectCorrectMovie - Use 'RecordedMethod_cbMovie_SelectCorrectMovieParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_cbMovie_SelectCorrectMovie()
        {
            #region Variable Declarations
            WinComboBox uICbMovieComboBox = this.UIMachineLearningWindow.UICbMovieWindow.UICbMovieComboBox;
            #endregion

            // Select 'Dr. Doolittle' in 'cbMovie' combo box
            uICbMovieComboBox.SelectedItem = this.RecordedMethod_cbMovie_SelectCorrectMovieParams.UICbMovieComboBoxSelectedItem;
        }
        
        /// <summary>
        /// RecordedMethod_cbMovie_SelectIncorrectMovie - Use 'RecordedMethod_cbMovie_SelectIncorrectMovieParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_cbMovie_SelectIncorrectMovie()
        {
            #region Variable Declarations
            WinComboBox uICbMovieComboBox = this.UIMachineLearningWindow.UICbMovieWindow.UICbMovieComboBox;
            #endregion

            // Select 'Ghettoblaster' in 'cbMovie' combo box
            uICbMovieComboBox.SelectedItem = this.RecordedMethod_cbMovie_SelectIncorrectMovieParams.UICbMovieComboBoxSelectedItem;
        }
        
        /// <summary>
        /// RecordedMethod_cbSex_SelectIncorrectSex - Use 'RecordedMethod_cbSex_SelectIncorrectSexParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_cbSex_SelectIncorrectSex()
        {
            #region Variable Declarations
            WinComboBox uICbSexComboBox = this.UIMachineLearningWindow.UICbSexWindow.UICbSexComboBox;
            #endregion

            // Select 'Kvinde' in 'cbSex' combo box
            uICbSexComboBox.SelectedItem = this.RecordedMethod_cbSex_SelectIncorrectSexParams.UICbSexComboBoxSelectedItem;
        }
        
        /// <summary>
        /// RecordedMethod_tabControl1_SelectlbMovieOnTabControl
        /// </summary>
        public void RecordedMethod_tabControl1_SelectlbMovieOnTabControl()
        {
            #region Variable Declarations
            WinTabPage uIFilmTabPage = this.UIMachineLearningWindow.UIKlubmedlemTabList.UIFilmTabPage;
            #endregion

            // Click 'Film' tab
            Mouse.Click(uIFilmTabPage, new Point(27, 19));
        }
        
        /// <summary>
        /// RecordedMethod_tbBirthYear_InputCorrectYear - Use 'RecordedMethod_tbBirthYear_InputCorrectYearParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_tbBirthYear_InputCorrectYear()
        {
            #region Variable Declarations
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Type '2000' in 'tbBirthYear' text box
            uITbBirthYearEdit.Text = this.RecordedMethod_tbBirthYear_InputCorrectYearParams.UITbBirthYearEditText;
        }
        
        /// <summary>
        /// RecordedMethod_tbBirthYear_InputIncorrectYear - Use 'RecordedMethod_tbBirthYear_InputIncorrectYearParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_tbBirthYear_InputIncorrectYear()
        {
            #region Variable Declarations
            WinEdit uITbBirthYearEdit = this.UIMachineLearningWindow.UITbBirthYearWindow.UITbBirthYearEdit;
            #endregion

            // Type '1999' in 'tbBirthYear' text box
            uITbBirthYearEdit.Text = this.RecordedMethod_tbBirthYear_InputIncorrectYearParams.UITbBirthYearEditText;
        }
        
        /// <summary>
        /// TESTASSERT - Use 'TESTASSERTExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TESTASSERT()
        {
            #region Variable Declarations
            WinEdit uITitleEdit = this.UIMp3tagv281CUsersHardWindow.UIItemWindow1.UITitleEdit;
            #endregion

            // Verify that the 'Text' property of 'Title:' text box contains 'metal'
            StringAssert.Contains(uITitleEdit.Text, this.TESTASSERTExpectedValues.UITitleEditText);
        }
        
        /// <summary>
        /// TESTRECORDING - Use 'TESTRECORDINGParams' to pass parameters into this method.
        /// </summary>
        public void TESTRECORDING()
        {
            #region Variable Declarations
            WinTitleBar uIMp3tagv281CUsersHardTitleBar = this.UIMp3tagv281CUsersHardWindow.UIMp3tagv281CUsersHardTitleBar;
            WinComboBox uITitleComboBox = this.UIMp3tagv281CUsersHardWindow.UIItemWindow.UITitleComboBox;
            #endregion

            // Click 'Mp3tag v2.81 - C:\Users\Hardy Drachmann\Mp3tag\' title bar
            Mouse.Click(uIMp3tagv281CUsersHardTitleBar, new Point(63, 15));

            // Select 'metal' in 'Title:' combo box
            uITitleComboBox.EditableItem = this.TESTRECORDINGParams.UITitleComboBoxEditableItem;
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbGenreIsPopulated - Use 'AssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbGenreIsPopulated()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText3 = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow1.UIScoredProbabilitiesfText3;
            #endregion

            // Verify that the 'Height' property of 'Scored Probabilities for Action: 0.05061298634741...' label is not equal to '20'
            Assert.AreNotEqual(this.AssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues.UIScoredProbabilitiesfText3Height, uIScoredProbabilitiesfText3.Height);
        }
        
        /// <summary>
        /// AssertMethod_btnCalculate_lbMovieIsPopulated - Use 'AssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnCalculate_lbMovieIsPopulated()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText4 = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIScoredProbabilitiesfText4;
            #endregion

            // Verify that the 'Height' property of 'Scored Probabilities for 12 Years A Slave: 0, Sco...' label is not equal to '20'
            Assert.AreNotEqual(this.AssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues.UIScoredProbabilitiesfText4Height, uIScoredProbabilitiesfText4.Height);
        }
        
        /// <summary>
        /// AssertMethod_btnReset_lbGenreIsNotReset - Use 'AssertMethod_btnReset_lbGenreIsNotResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnReset_lbGenreIsNotReset()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText3 = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow1.UIScoredProbabilitiesfText3;
            #endregion

            // Verify that the 'Height' property of 'Scored Probabilities for Action: 0.05061298634741...' label is not equal to '20'
            Assert.AreNotEqual(this.AssertMethod_btnReset_lbGenreIsNotResetExpectedValues.UIScoredProbabilitiesfText3Height, uIScoredProbabilitiesfText3.Height);
        }
        
        /// <summary>
        /// AssertMethod_btnReset_lbMovieIsNotReset - Use 'AssertMethod_btnReset_lbMovieIsNotResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_btnReset_lbMovieIsNotReset()
        {
            #region Variable Declarations
            WinText uIScoredProbabilitiesfText4 = this.UIMachineLearningWindow.UIScoredProbabilitiesfWindow.UIScoredProbabilitiesfText4;
            #endregion

            // Verify that the 'Height' property of 'Scored Probabilities for 12 Years A Slave: 0, Sco...' label is not equal to '20'
            Assert.AreNotEqual(this.AssertMethod_btnReset_lbMovieIsNotResetExpectedValues.UIScoredProbabilitiesfText4Height, uIScoredProbabilitiesfText4.Height);
        }
        
        #region Properties
        public virtual AssertMethod_btnCalculate_lbGenreIsResetExpectedValues AssertMethod_btnCalculate_lbGenreIsResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbGenreIsResetExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbGenreIsResetExpectedValues = new AssertMethod_btnCalculate_lbGenreIsResetExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbGenreIsResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues AssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues = new AssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues AssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues = new AssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues AssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues = new AssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnCalculate_lbMovieIsResetExpectedValues AssertMethod_btnCalculate_lbMovieIsResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbMovieIsResetExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbMovieIsResetExpectedValues = new AssertMethod_btnCalculate_lbMovieIsResetExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbMovieIsResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues AssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues = new AssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues AssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues = new AssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnCalculate_PopulatelbMovieExpectedValues AssertMethod_btnCalculate_PopulatelbMovieExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_PopulatelbMovieExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_PopulatelbMovieExpectedValues = new AssertMethod_btnCalculate_PopulatelbMovieExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_PopulatelbMovieExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnReset_lbGenreIsResetExpectedValues AssertMethod_btnReset_lbGenreIsResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnReset_lbGenreIsResetExpectedValues == null))
                {
                    this.mAssertMethod_btnReset_lbGenreIsResetExpectedValues = new AssertMethod_btnReset_lbGenreIsResetExpectedValues();
                }
                return this.mAssertMethod_btnReset_lbGenreIsResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnReset_lbMovieIsResetExpectedValues AssertMethod_btnReset_lbMovieIsResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnReset_lbMovieIsResetExpectedValues == null))
                {
                    this.mAssertMethod_btnReset_lbMovieIsResetExpectedValues = new AssertMethod_btnReset_lbMovieIsResetExpectedValues();
                }
                return this.mAssertMethod_btnReset_lbMovieIsResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnReset_tbBirthYearIsResetExpectedValues AssertMethod_btnReset_tbBirthYearIsResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnReset_tbBirthYearIsResetExpectedValues == null))
                {
                    this.mAssertMethod_btnReset_tbBirthYearIsResetExpectedValues = new AssertMethod_btnReset_tbBirthYearIsResetExpectedValues();
                }
                return this.mAssertMethod_btnReset_tbBirthYearIsResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues AssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues == null))
                {
                    this.mAssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues = new AssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues();
                }
                return this.mAssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues AssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues == null))
                {
                    this.mAssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues = new AssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues();
                }
                return this.mAssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues AssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues == null))
                {
                    this.mAssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues = new AssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues();
                }
                return this.mAssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues AssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues == null))
                {
                    this.mAssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues = new AssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues();
                }
                return this.mAssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues == null))
                {
                    this.mAssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues = new AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues();
                }
                return this.mAssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues == null))
                {
                    this.mAssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues = new AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues();
                }
                return this.mAssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues AssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues == null))
                {
                    this.mAssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues = new AssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues();
                }
                return this.mAssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues AssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues == null))
                {
                    this.mAssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues = new AssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues();
                }
                return this.mAssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues AssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues == null))
                {
                    this.mAssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues = new AssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues();
                }
                return this.mAssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues AssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues == null))
                {
                    this.mAssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues = new AssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues();
                }
                return this.mAssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues AssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues == null))
                {
                    this.mAssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues = new AssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues();
                }
                return this.mAssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues AssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues == null))
                {
                    this.mAssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues = new AssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues();
                }
                return this.mAssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues AssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues == null))
                {
                    this.mAssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues = new AssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues();
                }
                return this.mAssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues AssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues == null))
                {
                    this.mAssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues = new AssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues();
                }
                return this.mAssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbSex_HasCorrectSelectedSexExpectedValues AssertMethod_cbSex_HasCorrectSelectedSexExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbSex_HasCorrectSelectedSexExpectedValues == null))
                {
                    this.mAssertMethod_cbSex_HasCorrectSelectedSexExpectedValues = new AssertMethod_cbSex_HasCorrectSelectedSexExpectedValues();
                }
                return this.mAssertMethod_cbSex_HasCorrectSelectedSexExpectedValues;
            }
        }
        
        public virtual AssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues AssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues == null))
                {
                    this.mAssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues = new AssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues();
                }
                return this.mAssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues;
            }
        }
        
        public virtual AssertMethod_tabControl1_lbGenreIsResetExpectedValues AssertMethod_tabControl1_lbGenreIsResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_tabControl1_lbGenreIsResetExpectedValues == null))
                {
                    this.mAssertMethod_tabControl1_lbGenreIsResetExpectedValues = new AssertMethod_tabControl1_lbGenreIsResetExpectedValues();
                }
                return this.mAssertMethod_tabControl1_lbGenreIsResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_tabControl1_lbMovieIsResetExpectedValues AssertMethod_tabControl1_lbMovieIsResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_tabControl1_lbMovieIsResetExpectedValues == null))
                {
                    this.mAssertMethod_tabControl1_lbMovieIsResetExpectedValues = new AssertMethod_tabControl1_lbMovieIsResetExpectedValues();
                }
                return this.mAssertMethod_tabControl1_lbMovieIsResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues AssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues == null))
                {
                    this.mAssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues = new AssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues();
                }
                return this.mAssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues;
            }
        }
        
        public virtual AssertMethod_tbBirthYear_HasEmptyStringExpectedValues AssertMethod_tbBirthYear_HasEmptyStringExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_tbBirthYear_HasEmptyStringExpectedValues == null))
                {
                    this.mAssertMethod_tbBirthYear_HasEmptyStringExpectedValues = new AssertMethod_tbBirthYear_HasEmptyStringExpectedValues();
                }
                return this.mAssertMethod_tbBirthYear_HasEmptyStringExpectedValues;
            }
        }
        
        public virtual AssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues AssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues == null))
                {
                    this.mAssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues = new AssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues();
                }
                return this.mAssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues;
            }
        }
        
        public virtual AssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues AssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues == null))
                {
                    this.mAssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues = new AssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues();
                }
                return this.mAssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues;
            }
        }
        
        public virtual RecordedMethod__cbIncludeMovies_ActivateCheckBoxParams RecordedMethod__cbIncludeMovies_ActivateCheckBoxParams
        {
            get
            {
                if ((this.mRecordedMethod__cbIncludeMovies_ActivateCheckBoxParams == null))
                {
                    this.mRecordedMethod__cbIncludeMovies_ActivateCheckBoxParams = new RecordedMethod__cbIncludeMovies_ActivateCheckBoxParams();
                }
                return this.mRecordedMethod__cbIncludeMovies_ActivateCheckBoxParams;
            }
        }
        
        public virtual RecordedMethod__cbMovie_DisenableComboBoxParams RecordedMethod__cbMovie_DisenableComboBoxParams
        {
            get
            {
                if ((this.mRecordedMethod__cbMovie_DisenableComboBoxParams == null))
                {
                    this.mRecordedMethod__cbMovie_DisenableComboBoxParams = new RecordedMethod__cbMovie_DisenableComboBoxParams();
                }
                return this.mRecordedMethod__cbMovie_DisenableComboBoxParams;
            }
        }
        
        public virtual RecordedMethod__tbBirthYear_InputYearParams RecordedMethod__tbBirthYear_InputYearParams
        {
            get
            {
                if ((this.mRecordedMethod__tbBirthYear_InputYearParams == null))
                {
                    this.mRecordedMethod__tbBirthYear_InputYearParams = new RecordedMethod__tbBirthYear_InputYearParams();
                }
                return this.mRecordedMethod__tbBirthYear_InputYearParams;
            }
        }
        
        public virtual RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams
        {
            get
            {
                if ((this.mRecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams == null))
                {
                    this.mRecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams = new RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams();
                }
                return this.mRecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams;
            }
        }
        
        public virtual RecordedMethod_cbGenre_SelectCorrectGenreParams RecordedMethod_cbGenre_SelectCorrectGenreParams
        {
            get
            {
                if ((this.mRecordedMethod_cbGenre_SelectCorrectGenreParams == null))
                {
                    this.mRecordedMethod_cbGenre_SelectCorrectGenreParams = new RecordedMethod_cbGenre_SelectCorrectGenreParams();
                }
                return this.mRecordedMethod_cbGenre_SelectCorrectGenreParams;
            }
        }
        
        public virtual RecordedMethod_cbGenre_SelectIncorrectGenreParams RecordedMethod_cbGenre_SelectIncorrectGenreParams
        {
            get
            {
                if ((this.mRecordedMethod_cbGenre_SelectIncorrectGenreParams == null))
                {
                    this.mRecordedMethod_cbGenre_SelectIncorrectGenreParams = new RecordedMethod_cbGenre_SelectIncorrectGenreParams();
                }
                return this.mRecordedMethod_cbGenre_SelectIncorrectGenreParams;
            }
        }
        
        public virtual RecordedMethod_cbIncludeMovies_ActivateCheckBoxParams RecordedMethod_cbIncludeMovies_ActivateCheckBoxParams
        {
            get
            {
                if ((this.mRecordedMethod_cbIncludeMovies_ActivateCheckBoxParams == null))
                {
                    this.mRecordedMethod_cbIncludeMovies_ActivateCheckBoxParams = new RecordedMethod_cbIncludeMovies_ActivateCheckBoxParams();
                }
                return this.mRecordedMethod_cbIncludeMovies_ActivateCheckBoxParams;
            }
        }
        
        public virtual RecordedMethod_cbMovie_DisenableComboBoxParams RecordedMethod_cbMovie_DisenableComboBoxParams
        {
            get
            {
                if ((this.mRecordedMethod_cbMovie_DisenableComboBoxParams == null))
                {
                    this.mRecordedMethod_cbMovie_DisenableComboBoxParams = new RecordedMethod_cbMovie_DisenableComboBoxParams();
                }
                return this.mRecordedMethod_cbMovie_DisenableComboBoxParams;
            }
        }
        
        public virtual RecordedMethod_cbMovie_SelectCorrectMovieParams RecordedMethod_cbMovie_SelectCorrectMovieParams
        {
            get
            {
                if ((this.mRecordedMethod_cbMovie_SelectCorrectMovieParams == null))
                {
                    this.mRecordedMethod_cbMovie_SelectCorrectMovieParams = new RecordedMethod_cbMovie_SelectCorrectMovieParams();
                }
                return this.mRecordedMethod_cbMovie_SelectCorrectMovieParams;
            }
        }
        
        public virtual RecordedMethod_cbMovie_SelectIncorrectMovieParams RecordedMethod_cbMovie_SelectIncorrectMovieParams
        {
            get
            {
                if ((this.mRecordedMethod_cbMovie_SelectIncorrectMovieParams == null))
                {
                    this.mRecordedMethod_cbMovie_SelectIncorrectMovieParams = new RecordedMethod_cbMovie_SelectIncorrectMovieParams();
                }
                return this.mRecordedMethod_cbMovie_SelectIncorrectMovieParams;
            }
        }
        
        public virtual RecordedMethod_cbSex_SelectIncorrectSexParams RecordedMethod_cbSex_SelectIncorrectSexParams
        {
            get
            {
                if ((this.mRecordedMethod_cbSex_SelectIncorrectSexParams == null))
                {
                    this.mRecordedMethod_cbSex_SelectIncorrectSexParams = new RecordedMethod_cbSex_SelectIncorrectSexParams();
                }
                return this.mRecordedMethod_cbSex_SelectIncorrectSexParams;
            }
        }
        
        public virtual RecordedMethod_tbBirthYear_InputCorrectYearParams RecordedMethod_tbBirthYear_InputCorrectYearParams
        {
            get
            {
                if ((this.mRecordedMethod_tbBirthYear_InputCorrectYearParams == null))
                {
                    this.mRecordedMethod_tbBirthYear_InputCorrectYearParams = new RecordedMethod_tbBirthYear_InputCorrectYearParams();
                }
                return this.mRecordedMethod_tbBirthYear_InputCorrectYearParams;
            }
        }
        
        public virtual RecordedMethod_tbBirthYear_InputIncorrectYearParams RecordedMethod_tbBirthYear_InputIncorrectYearParams
        {
            get
            {
                if ((this.mRecordedMethod_tbBirthYear_InputIncorrectYearParams == null))
                {
                    this.mRecordedMethod_tbBirthYear_InputIncorrectYearParams = new RecordedMethod_tbBirthYear_InputIncorrectYearParams();
                }
                return this.mRecordedMethod_tbBirthYear_InputIncorrectYearParams;
            }
        }
        
        public virtual TESTASSERTExpectedValues TESTASSERTExpectedValues
        {
            get
            {
                if ((this.mTESTASSERTExpectedValues == null))
                {
                    this.mTESTASSERTExpectedValues = new TESTASSERTExpectedValues();
                }
                return this.mTESTASSERTExpectedValues;
            }
        }
        
        public virtual TESTRECORDINGParams TESTRECORDINGParams
        {
            get
            {
                if ((this.mTESTRECORDINGParams == null))
                {
                    this.mTESTRECORDINGParams = new TESTRECORDINGParams();
                }
                return this.mTESTRECORDINGParams;
            }
        }
        
        public virtual AssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues AssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues = new AssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues AssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues == null))
                {
                    this.mAssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues = new AssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues();
                }
                return this.mAssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnReset_lbGenreIsNotResetExpectedValues AssertMethod_btnReset_lbGenreIsNotResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnReset_lbGenreIsNotResetExpectedValues == null))
                {
                    this.mAssertMethod_btnReset_lbGenreIsNotResetExpectedValues = new AssertMethod_btnReset_lbGenreIsNotResetExpectedValues();
                }
                return this.mAssertMethod_btnReset_lbGenreIsNotResetExpectedValues;
            }
        }
        
        public virtual AssertMethod_btnReset_lbMovieIsNotResetExpectedValues AssertMethod_btnReset_lbMovieIsNotResetExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_btnReset_lbMovieIsNotResetExpectedValues == null))
                {
                    this.mAssertMethod_btnReset_lbMovieIsNotResetExpectedValues = new AssertMethod_btnReset_lbMovieIsNotResetExpectedValues();
                }
                return this.mAssertMethod_btnReset_lbMovieIsNotResetExpectedValues;
            }
        }
        
        public UIMachineLearningWindow UIMachineLearningWindow
        {
            get
            {
                if ((this.mUIMachineLearningWindow == null))
                {
                    this.mUIMachineLearningWindow = new UIMachineLearningWindow();
                }
                return this.mUIMachineLearningWindow;
            }
        }
        
        public UIMp3tagv281CUsersHardWindow UIMp3tagv281CUsersHardWindow
        {
            get
            {
                if ((this.mUIMp3tagv281CUsersHardWindow == null))
                {
                    this.mUIMp3tagv281CUsersHardWindow = new UIMp3tagv281CUsersHardWindow();
                }
                return this.mUIMp3tagv281CUsersHardWindow;
            }
        }
        
        public UIMachineLearningMicroWindow UIMachineLearningMicroWindow
        {
            get
            {
                if ((this.mUIMachineLearningMicroWindow == null))
                {
                    this.mUIMachineLearningMicroWindow = new UIMachineLearningMicroWindow();
                }
                return this.mUIMachineLearningMicroWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod_btnCalculate_lbGenreIsResetExpectedValues mAssertMethod_btnCalculate_lbGenreIsResetExpectedValues;
        
        private AssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues mAssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues;
        
        private AssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues mAssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues;
        
        private AssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues mAssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues;
        
        private AssertMethod_btnCalculate_lbMovieIsResetExpectedValues mAssertMethod_btnCalculate_lbMovieIsResetExpectedValues;
        
        private AssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues mAssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues;
        
        private AssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues mAssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues;
        
        private AssertMethod_btnCalculate_PopulatelbMovieExpectedValues mAssertMethod_btnCalculate_PopulatelbMovieExpectedValues;
        
        private AssertMethod_btnReset_lbGenreIsResetExpectedValues mAssertMethod_btnReset_lbGenreIsResetExpectedValues;
        
        private AssertMethod_btnReset_lbMovieIsResetExpectedValues mAssertMethod_btnReset_lbMovieIsResetExpectedValues;
        
        private AssertMethod_btnReset_tbBirthYearIsResetExpectedValues mAssertMethod_btnReset_tbBirthYearIsResetExpectedValues;
        
        private AssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues mAssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues;
        
        private AssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues mAssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues;
        
        private AssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues mAssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues;
        
        private AssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues mAssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues;
        
        private AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues mAssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues;
        
        private AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues mAssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues;
        
        private AssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues mAssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues;
        
        private AssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues mAssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues;
        
        private AssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues mAssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues;
        
        private AssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues mAssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues;
        
        private AssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues mAssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues;
        
        private AssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues mAssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues;
        
        private AssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues mAssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues;
        
        private AssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues mAssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues;
        
        private AssertMethod_cbSex_HasCorrectSelectedSexExpectedValues mAssertMethod_cbSex_HasCorrectSelectedSexExpectedValues;
        
        private AssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues mAssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues;
        
        private AssertMethod_tabControl1_lbGenreIsResetExpectedValues mAssertMethod_tabControl1_lbGenreIsResetExpectedValues;
        
        private AssertMethod_tabControl1_lbMovieIsResetExpectedValues mAssertMethod_tabControl1_lbMovieIsResetExpectedValues;
        
        private AssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues mAssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues;
        
        private AssertMethod_tbBirthYear_HasEmptyStringExpectedValues mAssertMethod_tbBirthYear_HasEmptyStringExpectedValues;
        
        private AssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues mAssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues;
        
        private AssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues mAssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues;
        
        private RecordedMethod__cbIncludeMovies_ActivateCheckBoxParams mRecordedMethod__cbIncludeMovies_ActivateCheckBoxParams;
        
        private RecordedMethod__cbMovie_DisenableComboBoxParams mRecordedMethod__cbMovie_DisenableComboBoxParams;
        
        private RecordedMethod__tbBirthYear_InputYearParams mRecordedMethod__tbBirthYear_InputYearParams;
        
        private RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams mRecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams;
        
        private RecordedMethod_cbGenre_SelectCorrectGenreParams mRecordedMethod_cbGenre_SelectCorrectGenreParams;
        
        private RecordedMethod_cbGenre_SelectIncorrectGenreParams mRecordedMethod_cbGenre_SelectIncorrectGenreParams;
        
        private RecordedMethod_cbIncludeMovies_ActivateCheckBoxParams mRecordedMethod_cbIncludeMovies_ActivateCheckBoxParams;
        
        private RecordedMethod_cbMovie_DisenableComboBoxParams mRecordedMethod_cbMovie_DisenableComboBoxParams;
        
        private RecordedMethod_cbMovie_SelectCorrectMovieParams mRecordedMethod_cbMovie_SelectCorrectMovieParams;
        
        private RecordedMethod_cbMovie_SelectIncorrectMovieParams mRecordedMethod_cbMovie_SelectIncorrectMovieParams;
        
        private RecordedMethod_cbSex_SelectIncorrectSexParams mRecordedMethod_cbSex_SelectIncorrectSexParams;
        
        private RecordedMethod_tbBirthYear_InputCorrectYearParams mRecordedMethod_tbBirthYear_InputCorrectYearParams;
        
        private RecordedMethod_tbBirthYear_InputIncorrectYearParams mRecordedMethod_tbBirthYear_InputIncorrectYearParams;
        
        private TESTASSERTExpectedValues mTESTASSERTExpectedValues;
        
        private TESTRECORDINGParams mTESTRECORDINGParams;
        
        private AssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues mAssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues;
        
        private AssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues mAssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues;
        
        private AssertMethod_btnReset_lbGenreIsNotResetExpectedValues mAssertMethod_btnReset_lbGenreIsNotResetExpectedValues;
        
        private AssertMethod_btnReset_lbMovieIsNotResetExpectedValues mAssertMethod_btnReset_lbMovieIsNotResetExpectedValues;
        
        private UIMachineLearningWindow mUIMachineLearningWindow;
        
        private UIMp3tagv281CUsersHardWindow mUIMp3tagv281CUsersHardWindow;
        
        private UIMachineLearningMicroWindow mUIMachineLearningMicroWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbGenreIsReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbGenreIsResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Ingen data er sendt til modellen endnu...' label starts with 'Ingen'
        /// </summary>
        public string UIIngendataersendttilmTextDisplayText = "Ingen";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbGenreNotDefaultValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbGenreNotDefaultValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Scored Probabilities for Class Action: 1, Scored ...' label is not equal to 'Ingen data er sendt til modellen endnu...'
        /// </summary>
        public string UIScoredProbabilitiesfText1DisplayText = "Ingen data er sendt til modellen endnu...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbGenreNotEmptyString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbGenreNotEmptyStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Scored Probabilities for Class Action: 0.05061298...' label is not equal to ''
        /// </summary>
        public string UIScoredProbabilitiesfTextDisplayText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbMovieIsNotReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbMovieIsNotResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Scored Probabilities for Class 12 Years A Slave: ...' label is not equal to 'Ingen data er sendt til modellen endnu...'
        /// </summary>
        public string UIScoredProbabilitiesfText1DisplayText = "Ingen data er sendt til modellen endnu...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbMovieIsReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbMovieIsResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Ingen data er sendt til modellen endnu...' label starts with 'Ingen'
        /// </summary>
        public string UIIngendataersendttilmTextDisplayText = "Ingen";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbMovieNotDefaultValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbMovieNotDefaultValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Scored Probabilities for Class 12 Years A Slave: ...' label is not equal to 'Ingen data er sendt til modellen endnu...'
        /// </summary>
        public string UIScoredProbabilitiesfText1DisplayText = "Ingen data er sendt til modellen endnu...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbMovieNotEmptyString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbMovieNotEmptyStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Scored Probabilities for Class 12 Years A Slave: ...' label is not equal to ''
        /// </summary>
        public string UIScoredProbabilitiesfTextDisplayText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_PopulatelbMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_PopulatelbMovieExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Scored Probabilities for Class 12 Years A Slave: ...' label equals ' 
        ///  
        ///    Scored Probabilities for Class 12 Years A Slave: 0,
        ///    Scored Probabilities for Class 2001: A Space Odyssey: 0,
        ///    Scored Probabilities for Class A Girl Walks Home Alone At Night: 0,
        ///    Scored Probabilities for Class Aliens: 0,
        ///    Scored Probabilities for Class Avengers: Infinity War: 0,
        ///    Scored Probabilities for Class Blade Runner: 0,
        ///    Scored Probabilities for Class Casablanca: 0,
        ///    Scored Probabilities for Class Chicago: 0,
        ///    Scored Probabilities for Class Citizen Kane: 0,
        ///    Scored Probabilities for Class City Of Angels: 0,
        ///    Scored Probabilities for Class Die Hard: 0,
        ///    Scored Probabilities for Class Don't Knock Twice: 0.570124831309042,
        ///    Scored Probabilities for Class Dr. Doolittle: 0,
        ///    Scored Probabilities for Class Enough Said: 0,
        ///    Scored Probabilities for Class Four Weddings And A Funeral: 0,
        ///    Scored Probabilities for Class Gimme Shelter: 0,
        ///    Scored Probabilities for Class Gone In 60 Seconds: 0,
        ///    Scored Probabilities for Class Gravity: 0,
        ///    Scored Probabilities for Class Hairspray: 0,
        ///    Scored Probabilities for Class Hoop Dreams: 0,
        ///    Scored Probabilities for Class Interstellar: 0,
        ///    Scored Probabilities for Class Lights Out: 0.0741898148148148,
        ///    Scored Probabilities for Class Man On Wire: 0,
        ///    Scored Probabilities for Class Memento: 0,
        ///    Scored Probabilities for Class Metropolis: 0,
        ///    Scored Probabilities for Class Office Space: 0,
        ///    Scored Probabilities for Class Oldboy: 0,
        ///    Scored Probabilities for Class Passenger 57: 0,
        ///    Scored Probabilities for Class Psycho: 0,
        ///    Scored Probabilities for Class Se7en: 0,
        ///    Scored Probabilities for Class Shine A Light: 0,
        ///    Scored Probabilities for Class Singin' In The Rain: 0,
        ///    Scored Probabilities for Class Stop Making Sense: 0,
        ///    Scored Probabilities for Class The Act Of Killing: 0,
        ///    Scored Probabilities for Class The Cove: 0,
        ///    Scored Probabilities for Class The Fast & The Furious: 0,
        ///    Scored Probabilities for Class The Grudge: 0.20273091'
        /// </summary>
        public string UIScoredProbabilitiesfTextDisplayText = " \r\n  \r\n    Scored Probabilities for Class 12 Years A Slave: 0,\r\n    Scored Probab" +
            "ilities for Class 2001: A Space Odyssey: 0,\r\n    Scored Probabilities for Class " +
            "A Girl Walks Home Alone At Night: 0,\r\n    Scored Probabilities for Class Aliens:" +
            " 0,\r\n    Scored Probabilities for Class Avengers: Infinity War: 0,\r\n    Scored P" +
            "robabilities for Class Blade Runner: 0,\r\n    Scored Probabilities for Class Casa" +
            "blanca: 0,\r\n    Scored Probabilities for Class Chicago: 0,\r\n    Scored Probabili" +
            "ties for Class Citizen Kane: 0,\r\n    Scored Probabilities for Class City Of Ange" +
            "ls: 0,\r\n    Scored Probabilities for Class Die Hard: 0,\r\n    Scored Probabilitie" +
            "s for Class Don\'t Knock Twice: 0.570124831309042,\r\n    Scored Probabilities for " +
            "Class Dr. Doolittle: 0,\r\n    Scored Probabilities for Class Enough Said: 0,\r\n   " +
            " Scored Probabilities for Class Four Weddings And A Funeral: 0,\r\n    Scored Prob" +
            "abilities for Class Gimme Shelter: 0,\r\n    Scored Probabilities for Class Gone I" +
            "n 60 Seconds: 0,\r\n    Scored Probabilities for Class Gravity: 0,\r\n    Scored Pro" +
            "babilities for Class Hairspray: 0,\r\n    Scored Probabilities for Class Hoop Drea" +
            "ms: 0,\r\n    Scored Probabilities for Class Interstellar: 0,\r\n    Scored Probabil" +
            "ities for Class Lights Out: 0.0741898148148148,\r\n    Scored Probabilities for Cl" +
            "ass Man On Wire: 0,\r\n    Scored Probabilities for Class Memento: 0,\r\n    Scored " +
            "Probabilities for Class Metropolis: 0,\r\n    Scored Probabilities for Class Offic" +
            "e Space: 0,\r\n    Scored Probabilities for Class Oldboy: 0,\r\n    Scored Probabili" +
            "ties for Class Passenger 57: 0,\r\n    Scored Probabilities for Class Psycho: 0,\r\n" +
            "    Scored Probabilities for Class Se7en: 0,\r\n    Scored Probabilities for Class" +
            " Shine A Light: 0,\r\n    Scored Probabilities for Class Singin\' In The Rain: 0,\r\n" +
            "    Scored Probabilities for Class Stop Making Sense: 0,\r\n    Scored Probabiliti" +
            "es for Class The Act Of Killing: 0,\r\n    Scored Probabilities for Class The Cove" +
            ": 0,\r\n    Scored Probabilities for Class The Fast & The Furious: 0,\r\n    Scored " +
            "Probabilities for Class The Grudge: 0.20273091";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnReset_lbGenreIsReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnReset_lbGenreIsResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of 'Ingen data er sendt til modellen endnu...' label equals '20'
        /// </summary>
        public int UIIngendataersendttilmTextHeight = 20;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnReset_lbMovieIsReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnReset_lbMovieIsResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of 'Ingen data er sendt til modellen endnu...' label equals '20'
        /// </summary>
        public int UIIngendataersendttilmTextHeight = 20;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnReset_tbBirthYearIsReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnReset_tbBirthYearIsResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'tbBirthYear' text box equals ''
        /// </summary>
        public string UITbBirthYearEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnUpdate_cbClubMemberIsPopulated'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnUpdate_cbClubMemberIsPopulatedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'Sandsynligheder' combo box equals 'Ja'
        /// </summary>
        public string UISandsynlighederComboBoxSelectedItem = "Ja";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnUpdate_cbGenreIsPopulated'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnUpdate_cbGenreIsPopulatedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cbGenre' combo box equals 'Action'
        /// </summary>
        public string UICbGenreComboBoxSelectedItem = "Action";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnUpdate_cbMovieIsPopulated'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnUpdate_cbMovieIsPopulatedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cbMovie' combo box equals 'Passenger 57'
        /// </summary>
        public string UICbMovieComboBoxSelectedItem = "Passenger 57";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnUpdate_cbSexIsPopulated'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnUpdate_cbSexIsPopulatedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 5 seconds for user delay between actions; Verify that the 'SelectedItem' property of 'cbSex' combo box equals 'Mand'
        /// </summary>
        public string UICbSexComboBoxSelectedItem = "Mand";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbClubMember_HasCorrectSelectedClubMemberStatusExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'Sandsynligheder' combo box equals 'Ja'
        /// </summary>
        public string UISandsynlighederComboBoxSelectedItem = "Ja";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbClubMember_HasIncorrectSelectedClubMemberStatusExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'Sandsynligheder' combo box is not equal to 'Ja'
        /// </summary>
        public string UISandsynlighederComboBoxSelectedItem = "Ja";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbGenre_HasCorrectSelectedGenre'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbGenre_HasCorrectSelectedGenreExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cbGenre' combo box equals 'Drama'
        /// </summary>
        public string UICbGenreComboBoxSelectedItem = "Drama";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbGenre_HasIncorrectSelectedGenre'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbGenre_HasIncorrectSelectedGenreExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cbGenre' combo box is not equal to 'Drama'
        /// </summary>
        public string UICbGenreComboBoxSelectedItem = "Drama";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbIncludeMovies_CheckBoxIsChecked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbIncludeMovies_CheckBoxIsCheckedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'Inkluder Film' check box equals 'True'
        /// </summary>
        public bool UIInkluderFilmCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbIncludeMovies_CheckBoxIsUnchecked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbIncludeMovies_CheckBoxIsUncheckedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'Inkluder Film' check box equals 'False'
        /// </summary>
        public bool UIInkluderFilmCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbMovie_ComboBoxIsDisenabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbMovie_ComboBoxIsDisenabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'cbMovie' combo box equals 'False'
        /// </summary>
        public bool UICbMovieComboBoxEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbMovie_ComboBoxIsEnabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbMovie_ComboBoxIsEnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'cbMovie' combo box equals 'True'
        /// </summary>
        public bool UICbMovieComboBoxEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbMovie_HasCorrectSelectedMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbMovie_HasCorrectSelectedMovieExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cbMovie' combo box equals 'Dr. Doolittle'
        /// </summary>
        public string UICbMovieComboBoxSelectedItem = "Dr. Doolittle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbMovie_HasIncorrectSelectedMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbMovie_HasIncorrectSelectedMovieExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cbMovie' combo box is not equal to 'Dr. Doolittle'
        /// </summary>
        public string UICbMovieComboBoxSelectedItem = "Dr. Doolittle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbSex_HasCorrectSelectedSex'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbSex_HasCorrectSelectedSexExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cbSex' combo box equals 'Mand'
        /// </summary>
        public string UICbSexComboBoxSelectedItem = "Mand";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_cbSex_HasIncorrectSelectedSex'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_cbSex_HasIncorrectSelectedSexExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cbSex' combo box is not equal to 'Mand'
        /// </summary>
        public string UICbSexComboBoxSelectedItem = "Mand";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_tabControl1_lbGenreIsReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_tabControl1_lbGenreIsResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Ingen data er sendt til modellen endnu...' label equals 'Ingen data er sendt til modellen endnu...'
        /// </summary>
        public string UIIngendataersendttilmTextDisplayText = "Ingen data er sendt til modellen endnu...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_tabControl1_lbMovieIsReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_tabControl1_lbMovieIsResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Ingen data er sendt til modellen endnu...' label equals 'Ingen data er sendt til modellen endnu...'
        /// </summary>
        public string UIIngendataersendttilmTextDisplayText = "Ingen data er sendt til modellen endnu...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_tbBirthYear_HasCorrectYearInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_tbBirthYear_HasCorrectYearInputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'tbBirthYear' text box equals '2000'
        /// </summary>
        public string UITbBirthYearEditText = "2000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_tbBirthYear_HasEmptyString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_tbBirthYear_HasEmptyStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'tbBirthYear' text box equals ''
        /// </summary>
        public string UITbBirthYearEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_tbBirthYear_HasIncorrectYearInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_tbBirthYear_HasIncorrectYearInputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'tbBirthYear' text box is not equal to '2000'
        /// </summary>
        public string UITbBirthYearEditText = "2000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_tbBirthYear_IsNotReadOnly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_tbBirthYear_IsNotReadOnlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'tbBirthYear' text box equals 'False'
        /// </summary>
        public bool UITbBirthYearEditReadOnly = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod__cbIncludeMovies_ActivateCheckBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod__cbIncludeMovies_ActivateCheckBoxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Inkluder Film' check box
        /// </summary>
        public bool UIInkluderFilmCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod__cbMovie_DisenableComboBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod__cbMovie_DisenableComboBoxParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Inkluder Film' check box
        /// </summary>
        public bool UIInkluderFilmCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod__tbBirthYear_InputYear'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod__tbBirthYear_InputYearParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2000' in 'tbBirthYear' text box
        /// </summary>
        public string UITbBirthYearEditText = "2000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_cbClubMember_SelectIncorrectClubMemberStatusParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Nej' in 'Sandsynligheder' combo box
        /// </summary>
        public string UISandsynlighederComboBoxSelectedItem = "Nej";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_cbGenre_SelectCorrectGenre'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_cbGenre_SelectCorrectGenreParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Drama' in 'cbGenre' combo box
        /// </summary>
        public string UICbGenreComboBoxSelectedItem = "Drama";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_cbGenre_SelectIncorrectGenre'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_cbGenre_SelectIncorrectGenreParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Horror' in 'cbGenre' combo box
        /// </summary>
        public string UICbGenreComboBoxSelectedItem = "Horror";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_cbIncludeMovies_ActivateCheckBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_cbIncludeMovies_ActivateCheckBoxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Inkluder Film' check box
        /// </summary>
        public bool UIInkluderFilmCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_cbMovie_DisenableComboBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_cbMovie_DisenableComboBoxParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Inkluder Film' check box
        /// </summary>
        public bool UIInkluderFilmCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_cbMovie_SelectCorrectMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_cbMovie_SelectCorrectMovieParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Dr. Doolittle' in 'cbMovie' combo box
        /// </summary>
        public string UICbMovieComboBoxSelectedItem = "Dr. Doolittle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_cbMovie_SelectIncorrectMovie'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_cbMovie_SelectIncorrectMovieParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Ghettoblaster' in 'cbMovie' combo box
        /// </summary>
        public string UICbMovieComboBoxSelectedItem = "Ghettoblaster";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_cbSex_SelectIncorrectSex'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_cbSex_SelectIncorrectSexParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Kvinde' in 'cbSex' combo box
        /// </summary>
        public string UICbSexComboBoxSelectedItem = "Kvinde";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_tbBirthYear_InputCorrectYear'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_tbBirthYear_InputCorrectYearParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2000' in 'tbBirthYear' text box
        /// </summary>
        public string UITbBirthYearEditText = "2000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_tbBirthYear_InputIncorrectYear'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod_tbBirthYear_InputIncorrectYearParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1999' in 'tbBirthYear' text box
        /// </summary>
        public string UITbBirthYearEditText = "1999";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TESTASSERT'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TESTASSERTExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Title:' text box contains 'metal'
        /// </summary>
        public string UITitleEditText = "metal";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TESTRECORDING'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TESTRECORDINGParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'metal' in 'Title:' combo box
        /// </summary>
        public string UITitleComboBoxEditableItem = "metal";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbGenreIsPopulated'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbGenreIsPopulatedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of 'Scored Probabilities for Action: 0.05061298634741...' label is not equal to '20'
        /// </summary>
        public int UIScoredProbabilitiesfText3Height = 20;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnCalculate_lbMovieIsPopulated'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnCalculate_lbMovieIsPopulatedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of 'Scored Probabilities for 12 Years A Slave: 0, Sco...' label is not equal to '20'
        /// </summary>
        public int UIScoredProbabilitiesfText4Height = 20;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnReset_lbGenreIsNotReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnReset_lbGenreIsNotResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of 'Scored Probabilities for Action: 0.05061298634741...' label is not equal to '20'
        /// </summary>
        public int UIScoredProbabilitiesfText3Height = 20;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_btnReset_lbMovieIsNotReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod_btnReset_lbMovieIsNotResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of 'Scored Probabilities for 12 Years A Slave: 0, Sco...' label is not equal to '20'
        /// </summary>
        public int UIScoredProbabilitiesfText4Height = 20;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMachineLearningWindow : WinWindow
    {
        
        public UIMachineLearningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Machine Learning";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public UITbBirthYearWindow UITbBirthYearWindow
        {
            get
            {
                if ((this.mUITbBirthYearWindow == null))
                {
                    this.mUITbBirthYearWindow = new UITbBirthYearWindow(this);
                }
                return this.mUITbBirthYearWindow;
            }
        }
        
        public WinClient UIMachineLearningClient
        {
            get
            {
                if ((this.mUIMachineLearningClient == null))
                {
                    this.mUIMachineLearningClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIMachineLearningClient.SearchProperties[WinControl.PropertyNames.Name] = "Machine Learning";
                    this.mUIMachineLearningClient.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIMachineLearningClient;
            }
        }
        
        public UICbSexWindow UICbSexWindow
        {
            get
            {
                if ((this.mUICbSexWindow == null))
                {
                    this.mUICbSexWindow = new UICbSexWindow(this);
                }
                return this.mUICbSexWindow;
            }
        }
        
        public UICbClubMemberWindow UICbClubMemberWindow
        {
            get
            {
                if ((this.mUICbClubMemberWindow == null))
                {
                    this.mUICbClubMemberWindow = new UICbClubMemberWindow(this);
                }
                return this.mUICbClubMemberWindow;
            }
        }
        
        public UICbMovieWindow UICbMovieWindow
        {
            get
            {
                if ((this.mUICbMovieWindow == null))
                {
                    this.mUICbMovieWindow = new UICbMovieWindow(this);
                }
                return this.mUICbMovieWindow;
            }
        }
        
        public UIInkluderFilmWindow UIInkluderFilmWindow
        {
            get
            {
                if ((this.mUIInkluderFilmWindow == null))
                {
                    this.mUIInkluderFilmWindow = new UIInkluderFilmWindow(this);
                }
                return this.mUIInkluderFilmWindow;
            }
        }
        
        public UICbGenreWindow UICbGenreWindow
        {
            get
            {
                if ((this.mUICbGenreWindow == null))
                {
                    this.mUICbGenreWindow = new UICbGenreWindow(this);
                }
                return this.mUICbGenreWindow;
            }
        }
        
        public UIBeregnWindow UIBeregnWindow
        {
            get
            {
                if ((this.mUIBeregnWindow == null))
                {
                    this.mUIBeregnWindow = new UIBeregnWindow(this);
                }
                return this.mUIBeregnWindow;
            }
        }
        
        public UIKlubmedlemTabList UIKlubmedlemTabList
        {
            get
            {
                if ((this.mUIKlubmedlemTabList == null))
                {
                    this.mUIKlubmedlemTabList = new UIKlubmedlemTabList(this);
                }
                return this.mUIKlubmedlemTabList;
            }
        }
        
        public UIScoredProbabilitiesfWindow UIScoredProbabilitiesfWindow
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfWindow == null))
                {
                    this.mUIScoredProbabilitiesfWindow = new UIScoredProbabilitiesfWindow(this);
                }
                return this.mUIScoredProbabilitiesfWindow;
            }
        }
        
        public UIScoredProbabilitiesfWindow1 UIScoredProbabilitiesfWindow1
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfWindow1 == null))
                {
                    this.mUIScoredProbabilitiesfWindow1 = new UIScoredProbabilitiesfWindow1(this);
                }
                return this.mUIScoredProbabilitiesfWindow1;
            }
        }
        
        public UINulstilWindow UINulstilWindow
        {
            get
            {
                if ((this.mUINulstilWindow == null))
                {
                    this.mUINulstilWindow = new UINulstilWindow(this);
                }
                return this.mUINulstilWindow;
            }
        }
        
        public UIOpdaterWindow UIOpdaterWindow
        {
            get
            {
                if ((this.mUIOpdaterWindow == null))
                {
                    this.mUIOpdaterWindow = new UIOpdaterWindow(this);
                }
                return this.mUIOpdaterWindow;
            }
        }
        
        public UIPanelMovieWindow UIPanelMovieWindow
        {
            get
            {
                if ((this.mUIPanelMovieWindow == null))
                {
                    this.mUIPanelMovieWindow = new UIPanelMovieWindow(this);
                }
                return this.mUIPanelMovieWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITbBirthYearWindow mUITbBirthYearWindow;
        
        private WinClient mUIMachineLearningClient;
        
        private UICbSexWindow mUICbSexWindow;
        
        private UICbClubMemberWindow mUICbClubMemberWindow;
        
        private UICbMovieWindow mUICbMovieWindow;
        
        private UIInkluderFilmWindow mUIInkluderFilmWindow;
        
        private UICbGenreWindow mUICbGenreWindow;
        
        private UIBeregnWindow mUIBeregnWindow;
        
        private UIKlubmedlemTabList mUIKlubmedlemTabList;
        
        private UIScoredProbabilitiesfWindow mUIScoredProbabilitiesfWindow;
        
        private UIScoredProbabilitiesfWindow1 mUIScoredProbabilitiesfWindow1;
        
        private UINulstilWindow mUINulstilWindow;
        
        private UIOpdaterWindow mUIOpdaterWindow;
        
        private UIPanelMovieWindow mUIPanelMovieWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITbBirthYearWindow : WinWindow
    {
        
        public UITbBirthYearWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tbBirthYear";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinEdit UITbBirthYearEdit
        {
            get
            {
                if ((this.mUITbBirthYearEdit == null))
                {
                    this.mUITbBirthYearEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITbBirthYearEdit.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUITbBirthYearEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITbBirthYearEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICbSexWindow : WinWindow
    {
        
        public UICbSexWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbSex";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICbSexComboBox
        {
            get
            {
                if ((this.mUICbSexComboBox == null))
                {
                    this.mUICbSexComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICbSexComboBox.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUICbSexComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICbSexComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICbClubMemberWindow : WinWindow
    {
        
        public UICbClubMemberWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbClubMember";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinComboBox UISandsynlighederComboBox
        {
            get
            {
                if ((this.mUISandsynlighederComboBox == null))
                {
                    this.mUISandsynlighederComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISandsynlighederComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Sandsynligheder";
                    this.mUISandsynlighederComboBox.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUISandsynlighederComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUISandsynlighederComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICbMovieWindow : WinWindow
    {
        
        public UICbMovieWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbMovie";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICbMovieComboBox
        {
            get
            {
                if ((this.mUICbMovieComboBox == null))
                {
                    this.mUICbMovieComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICbMovieComboBox.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUICbMovieComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICbMovieComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIInkluderFilmWindow : WinWindow
    {
        
        public UIInkluderFilmWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbIncludeMovies";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIInkluderFilmCheckBox
        {
            get
            {
                if ((this.mUIInkluderFilmCheckBox == null))
                {
                    this.mUIInkluderFilmCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIInkluderFilmCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Inkluder Film";
                    this.mUIInkluderFilmCheckBox.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIInkluderFilmCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIInkluderFilmCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICbGenreWindow : WinWindow
    {
        
        public UICbGenreWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbGenre";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICbGenreComboBox
        {
            get
            {
                if ((this.mUICbGenreComboBox == null))
                {
                    this.mUICbGenreComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICbGenreComboBox.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUICbGenreComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICbGenreComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBeregnWindow : WinWindow
    {
        
        public UIBeregnWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCalculate";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinButton UIBeregnButton
        {
            get
            {
                if ((this.mUIBeregnButton == null))
                {
                    this.mUIBeregnButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBeregnButton.SearchProperties[WinButton.PropertyNames.Name] = "Beregn";
                    this.mUIBeregnButton.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIBeregnButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBeregnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIKlubmedlemTabList : WinTabList
    {
        
        public UIKlubmedlemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Klubmedlem";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIFilmTabPage
        {
            get
            {
                if ((this.mUIFilmTabPage == null))
                {
                    this.mUIFilmTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIFilmTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Film";
                    this.mUIFilmTabPage.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIFilmTabPage;
            }
        }
        
        public WinTabPage UIGenreTabPage
        {
            get
            {
                if ((this.mUIGenreTabPage == null))
                {
                    this.mUIGenreTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIGenreTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Genre";
                    this.mUIGenreTabPage.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIGenreTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIFilmTabPage;
        
        private WinTabPage mUIGenreTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIScoredProbabilitiesfWindow : WinWindow
    {
        
        public UIScoredProbabilitiesfWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lbMovie";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinText UIScoredProbabilitiesfText
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText == null))
                {
                    this.mUIScoredProbabilitiesfText = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText.SearchProperties[WinText.PropertyNames.Name] = "       Scored Probabilities for Class 12 Years A Slave: 0,    Scored Probabilitie" +
                        "s for Class 2001: A Space Odyssey: 0,    Scored Probabilities for Class A Girl W" +
                        "alks Home Alone At Night: 0,    Scored Probabilities for Class Aliens: 0,    Sco" +
                        "red Probabilities for Class Avengers: Infinity War: 0,    Scored Probabilities f" +
                        "or Class Blade Runner: 0,    Scored Probabilities for Class Casablanca: 0,    Sc" +
                        "ored Probabilities for Class Chicago: 0,    Scored Probabilities for Class Citiz" +
                        "en Kane: 0,    Scored Probabilities for Class City Of Angels: 0,    Scored Proba" +
                        "bilities for Class Die Hard: 0,    Scored Probabilities for Class Don\'t Knock Tw" +
                        "ice: 0.570124831309042,    Scored Probabilities for Class Dr. Doolittle: 0,    S" +
                        "cored Probabilities for Class Enough Said: 0,    Scored Probabilities for Class " +
                        "Four Weddings And A Funeral: 0,    Scored Probabilities for Class Gimme Shelter:" +
                        " 0,    Scored Probabilities for Class Gone In 60 Seconds: 0,    Scored Probabili" +
                        "ties for Class Gravity: 0,    Scored Probabilities for Class Hairspray: 0,    Sc" +
                        "ored Probabilities for Class Hoop Dreams: 0,    Scored Probabilities for Class I" +
                        "nterstellar: 0,    Scored Probabilities for Class Lights Out: 0.0741898148148148" +
                        ",    Scored Probabilities for Class Man On Wire: 0,    Scored Probabilities for " +
                        "Class Memento: 0,    Scored Probabilities for Class Metropolis: 0,    Scored Pro" +
                        "babilities for Class Office Space: 0,    Scored Probabilities for Class Oldboy: " +
                        "0,    Scored Probabilities for Class Passenger 57: 0,    Scored Probabilities fo" +
                        "r Class Psycho: 0,    Scored Probabilities for Class Se7en: 0,    Scored Probabi" +
                        "lities for Class Shine A Light: 0,    Scored Probabilities for Class Singin\' In " +
                        "The Rain: 0,    Scored Probabilities for Class Stop Making Sense: 0,    Scored P" +
                        "robabilities for Class The Act Of Killing: 0,    Scored Probabilities for Class " +
                        "The Cove: 0,    Scored Probabilities for Class The Fast  The Furious: 0,    Scor" +
                        "ed Probabilities for Class The Grudge: 0.202730919178288,    Scored Probabilitie" +
                        "s for Class The Last Waltz: 0,    Scored Probabilities for Class The Long Kiss G" +
                        "oodnight: 0,    Scored Probabilities for Class The Nutty Professor: 0,    Scored" +
                        " Probabilities for Class The Ring: 0.0686159844054581,    Scored Probabilities f" +
                        "or Class The Silence Of The Lambs: 0,    Scored Probabilities for Class The Song" +
                        " Remains The Same: 0,    Scored Probabilities for Class The Sound Of Music: 0,  " +
                        "  Scored Probabilities for Class The Thin Blue Line: 0,    Scored Probabilities " +
                        "for Class The Town: 0,    Scored Probabilities for Class Toy Story: 0,    Scored" +
                        " Probabilities for Class West Side Story: 0,    Scored Probabilities for Class W" +
                        "hite Chicks: 0,    Scored Probabilities for Class Wrong Turn: 0.0843384502923977" +
                        ",    Scored Labels: Don\'t Knock Twice  ";
                    this.mUIScoredProbabilitiesfText.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText;
            }
        }
        
        public WinText UIIngendataersendttilmText
        {
            get
            {
                if ((this.mUIIngendataersendttilmText == null))
                {
                    this.mUIIngendataersendttilmText = new WinText(this);
                    #region Search Criteria
                    this.mUIIngendataersendttilmText.SearchProperties[WinText.PropertyNames.Name] = "Ingen data er sendt til modellen endnu...";
                    this.mUIIngendataersendttilmText.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIIngendataersendttilmText;
            }
        }
        
        public WinText UIScoredProbabilitiesfText1
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText1 == null))
                {
                    this.mUIScoredProbabilitiesfText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText1.SearchProperties[WinText.PropertyNames.Name] = "       Scored Probabilities for Class 12 Years A Slave: 0,    Scored Probabilitie" +
                        "s for Class 2001: A Space Odyssey: 0,    Scored Probabilities for Class A Girl W" +
                        "alks Home Alone At Night: 0,    Scored Probabilities for Class Aliens: 0,    Sco" +
                        "red Probabilities for Class Avengers: Infinity War: 0,    Scored Probabilities f" +
                        "or Class Blade Runner: 0,    Scored Probabilities for Class Casablanca: 0,    Sc" +
                        "ored Probabilities for Class Chicago: 0,    Scored Probabilities for Class Citiz" +
                        "en Kane: 0,    Scored Probabilities for Class City Of Angels: 0,    Scored Proba" +
                        "bilities for Class Die Hard: 0.228937894834634,    Scored Probabilities for Clas" +
                        "s Don\'t Knock Twice: 0,    Scored Probabilities for Class Dr. Doolittle: 0,    S" +
                        "cored Probabilities for Class Enough Said: 0,    Scored Probabilities for Class " +
                        "Four Weddings And A Funeral: 0,    Scored Probabilities for Class Gimme Shelter:" +
                        " 0,    Scored Probabilities for Class Gone In 60 Seconds: 0.228069258639911,    " +
                        "Scored Probabilities for Class Gravity: 0,    Scored Probabilities for Class Hai" +
                        "rspray: 0,    Scored Probabilities for Class Hoop Dreams: 0,    Scored Probabili" +
                        "ties for Class Interstellar: 0,    Scored Probabilities for Class Lights Out: 0," +
                        "    Scored Probabilities for Class Man On Wire: 0,    Scored Probabilities for C" +
                        "lass Memento: 0,    Scored Probabilities for Class Metropolis: 0,    Scored Prob" +
                        "abilities for Class Office Space: 0,    Scored Probabilities for Class Oldboy: 0" +
                        ",    Scored Probabilities for Class Passenger 57: 0.334619642635947,    Scored P" +
                        "robabilities for Class Psycho: 0,    Scored Probabilities for Class Se7en: 0,   " +
                        " Scored Probabilities for Class Shine A Light: 0,    Scored Probabilities for Cl" +
                        "ass Singin\' In The Rain: 0,    Scored Probabilities for Class Stop Making Sense:" +
                        " 0,    Scored Probabilities for Class The Act Of Killing: 0,    Scored Probabili" +
                        "ties for Class The Cove: 0,    Scored Probabilities for Class The Fast  The Furi" +
                        "ous: 0.156273225566704,    Scored Probabilities for Class The Grudge: 0,    Scor" +
                        "ed Probabilities for Class The Last Waltz: 0,    Scored Probabilities for Class " +
                        "The Long Kiss Goodnight: 0.0520999783228044,    Scored Probabilities for Class T" +
                        "he Nutty Professor: 0,    Scored Probabilities for Class The Ring: 0,    Scored " +
                        "Probabilities for Class The Silence Of The Lambs: 0,    Scored Probabilities for" +
                        " Class The Song Remains The Same: 0,    Scored Probabilities for Class The Sound" +
                        " Of Music: 0,    Scored Probabilities for Class The Thin Blue Line: 0,    Scored" +
                        " Probabilities for Class The Town: 0,    Scored Probabilities for Class Toy Stor" +
                        "y: 0,    Scored Probabilities for Class West Side Story: 0,    Scored Probabilit" +
                        "ies for Class White Chicks: 0,    Scored Probabilities for Class Wrong Turn: 0, " +
                        "   Scored Labels: Passenger 57  ";
                    this.mUIScoredProbabilitiesfText1.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText1;
            }
        }
        
        public WinText UIScoredProbabilitiesfText2
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText2 == null))
                {
                    this.mUIScoredProbabilitiesfText2 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText2.SearchProperties[WinText.PropertyNames.Name] = "       Scored Probabilities for Class 12 Years A Slave: 0,    Scored Probabilitie" +
                        "s for Class 2001: A Space Odyssey: 0,    Scored Probabilities for Class A Girl W" +
                        "alks Home Alone At Night: 0,    Scored Probabilities for Class Aliens: 0,    Sco" +
                        "red Probabilities for Class Avengers: Infinity War: 0,    Scored Probabilities f" +
                        "or Class Blade Runner: 0,    Scored Probabilities for Class Casablanca: 0,    Sc" +
                        "ored Probabilities for Class Chicago: 0,    Scored Probabilities for Class Citiz" +
                        "en Kane: 0,    Scored Probabilities for Class City Of Angels: 0,    Scored Proba" +
                        "bilities for Class Die Hard: 0.260989176885916,    Scored Probabilities for Clas" +
                        "s Don\'t Knock Twice: 0,    Scored Probabilities for Class Dr. Doolittle: 0,    S" +
                        "cored Probabilities for Class Enough Said: 0,    Scored Probabilities for Class " +
                        "Four Weddings And A Funeral: 0,    Scored Probabilities for Class Gimme Shelter:" +
                        " 0,    Scored Probabilities for Class Gone In 60 Seconds: 0.27053720735786,    S" +
                        "cored Probabilities for Class Gravity: 0,    Scored Probabilities for Class Hair" +
                        "spray: 0,    Scored Probabilities for Class Hoop Dreams: 0,    Scored Probabilit" +
                        "ies for Class Interstellar: 0,    Scored Probabilities for Class Lights Out: 0, " +
                        "   Scored Probabilities for Class Man On Wire: 0,    Scored Probabilities for Cl" +
                        "ass Memento: 0,    Scored Probabilities for Class Metropolis: 0,    Scored Proba" +
                        "bilities for Class Office Space: 0,    Scored Probabilities for Class Oldboy: 0," +
                        "    Scored Probabilities for Class Passenger 57: 0.297760668276973,    Scored Pr" +
                        "obabilities for Class Psycho: 0,    Scored Probabilities for Class Se7en: 0,    " +
                        "Scored Probabilities for Class Shine A Light: 0,    Scored Probabilities for Cla" +
                        "ss Singin\' In The Rain: 0,    Scored Probabilities for Class Stop Making Sense: " +
                        "0,    Scored Probabilities for Class The Act Of Killing: 0,    Scored Probabilit" +
                        "ies for Class The Cove: 0,    Scored Probabilities for Class The Fast  The Furio" +
                        "us: 0.147459123002601,    Scored Probabilities for Class The Grudge: 0,    Score" +
                        "d Probabilities for Class The Last Waltz: 0,    Scored Probabilities for Class T" +
                        "he Long Kiss Goodnight: 0.0232538244766506,    Scored Probabilities for Class Th" +
                        "e Nutty Professor: 0,    Scored Probabilities for Class The Ring: 0,    Scored P" +
                        "robabilities for Class The Silence Of The Lambs: 0,    Scored Probabilities for " +
                        "Class The Song Remains The Same: 0,    Scored Probabilities for Class The Sound " +
                        "Of Music: 0,    Scored Probabilities for Class The Thin Blue Line: 0,    Scored " +
                        "Probabilities for Class The Town: 0,    Scored Probabilities for Class Toy Story" +
                        ": 0,    Scored Probabilities for Class West Side Story: 0,    Scored Probabiliti" +
                        "es for Class White Chicks: 0,    Scored Probabilities for Class Wrong Turn: 0,  " +
                        "  Scored Labels: Passenger 57  ";
                    this.mUIScoredProbabilitiesfText2.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText2;
            }
        }
        
        public WinText UIScoredProbabilitiesfText3
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText3 == null))
                {
                    this.mUIScoredProbabilitiesfText3 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText3.SearchProperties[WinText.PropertyNames.Name] = "       Scored Probabilities for  12 Years A Slave: 0,    Scored Probabilities for" +
                        "  2001: A Space Odyssey: 0,    Scored Probabilities for  A Girl Walks Home Alone" +
                        " At Night: 0,    Scored Probabilities for  Aliens: 0,    Scored Probabilities fo" +
                        "r  Avengers: Infinity War: 0,    Scored Probabilities for  Blade Runner: 0,    S" +
                        "cored Probabilities for  Casablanca: 0,    Scored Probabilities for  Chicago: 0," +
                        "    Scored Probabilities for  Citizen Kane: 0,    Scored Probabilities for  City" +
                        " Of Angels: 0,    Scored Probabilities for  Die Hard: 0,    Scored Probabilities" +
                        " for  Don\'t Knock Twice: 0.570124831309042,    Scored Probabilities for  Dr. Doo" +
                        "little: 0,    Scored Probabilities for  Enough Said: 0,    Scored Probabilities " +
                        "for  Four Weddings And A Funeral: 0,    Scored Probabilities for  Gimme Shelter:" +
                        " 0,    Scored Probabilities for  Gone In 60 Seconds: 0,    Scored Probabilities " +
                        "for  Gravity: 0,    Scored Probabilities for  Hairspray: 0,    Scored Probabilit" +
                        "ies for  Hoop Dreams: 0,    Scored Probabilities for  Interstellar: 0,    Scored" +
                        " Probabilities for  Lights Out: 0.0741898148148148,    Scored Probabilities for " +
                        " Man On Wire: 0,    Scored Probabilities for  Memento: 0,    Scored Probabilitie" +
                        "s for  Metropolis: 0,    Scored Probabilities for  Office Space: 0,    Scored Pr" +
                        "obabilities for  Oldboy: 0,    Scored Probabilities for  Passenger 57: 0,    Sco" +
                        "red Probabilities for  Psycho: 0,    Scored Probabilities for  Se7en: 0,    Scor" +
                        "ed Probabilities for  Shine A Light: 0,    Scored Probabilities for  Singin\' In " +
                        "The Rain: 0,    Scored Probabilities for  Stop Making Sense: 0,    Scored Probab" +
                        "ilities for  The Act Of Killing: 0,    Scored Probabilities for  The Cove: 0,   " +
                        " Scored Probabilities for  The Fast  The Furious: 0,    Scored Probabilities for" +
                        "  The Grudge: 0.202730919178288,    Scored Probabilities for  The Last Waltz: 0," +
                        "    Scored Probabilities for  The Long Kiss Goodnight: 0,    Scored Probabilitie" +
                        "s for  The Nutty Professor: 0,    Scored Probabilities for  The Ring: 0.06861598" +
                        "44054581,    Scored Probabilities for  The Silence Of The Lambs: 0,    Scored Pr" +
                        "obabilities for  The Song Remains The Same: 0,    Scored Probabilities for  The " +
                        "Sound Of Music: 0,    Scored Probabilities for  The Thin Blue Line: 0,    Scored" +
                        " Probabilities for  The Town: 0,    Scored Probabilities for  Toy Story: 0,    S" +
                        "cored Probabilities for  West Side Story: 0,    Scored Probabilities for  White " +
                        "Chicks: 0,    Scored Probabilities for  Wrong Turn: 0.0843384502923977,    Score" +
                        "d Labels: Don\'t Knock Twice  ";
                    this.mUIScoredProbabilitiesfText3.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText3;
            }
        }
        
        public WinText UIScoredProbabilitiesfText4
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText4 == null))
                {
                    this.mUIScoredProbabilitiesfText4 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText4.SearchProperties[WinText.PropertyNames.Name] = "       Scored Probabilities for 12 Years A Slave: 0,    Scored Probabilities for " +
                        "2001: A Space Odyssey: 0,    Scored Probabilities for A Girl Walks Home Alone At" +
                        " Night: 0,    Scored Probabilities for Aliens: 0,    Scored Probabilities for Av" +
                        "engers: Infinity War: 0,    Scored Probabilities for Blade Runner: 0,    Scored " +
                        "Probabilities for Casablanca: 0,    Scored Probabilities for Chicago: 0,    Scor" +
                        "ed Probabilities for Citizen Kane: 0,    Scored Probabilities for City Of Angels" +
                        ": 0,    Scored Probabilities for Die Hard: 0,    Scored Probabilities for Don\'t " +
                        "Knock Twice: 0.570124831309042,    Scored Probabilities for Dr. Doolittle: 0,   " +
                        " Scored Probabilities for Enough Said: 0,    Scored Probabilities for Four Weddi" +
                        "ngs And A Funeral: 0,    Scored Probabilities for Gimme Shelter: 0,    Scored Pr" +
                        "obabilities for Gone In 60 Seconds: 0,    Scored Probabilities for Gravity: 0,  " +
                        "  Scored Probabilities for Hairspray: 0,    Scored Probabilities for Hoop Dreams" +
                        ": 0,    Scored Probabilities for Interstellar: 0,    Scored Probabilities for Li" +
                        "ghts Out: 0.0741898148148148,    Scored Probabilities for Man On Wire: 0,    Sco" +
                        "red Probabilities for Memento: 0,    Scored Probabilities for Metropolis: 0,    " +
                        "Scored Probabilities for Office Space: 0,    Scored Probabilities for Oldboy: 0," +
                        "    Scored Probabilities for Passenger 57: 0,    Scored Probabilities for Psycho" +
                        ": 0,    Scored Probabilities for Se7en: 0,    Scored Probabilities for Shine A L" +
                        "ight: 0,    Scored Probabilities for Singin\' In The Rain: 0,    Scored Probabili" +
                        "ties for Stop Making Sense: 0,    Scored Probabilities for The Act Of Killing: 0" +
                        ",    Scored Probabilities for The Cove: 0,    Scored Probabilities for The Fast " +
                        " The Furious: 0,    Scored Probabilities for The Grudge: 0.202730919178288,    S" +
                        "cored Probabilities for The Last Waltz: 0,    Scored Probabilities for The Long " +
                        "Kiss Goodnight: 0,    Scored Probabilities for The Nutty Professor: 0,    Scored" +
                        " Probabilities for The Ring: 0.0686159844054581,    Scored Probabilities for The" +
                        " Silence Of The Lambs: 0,    Scored Probabilities for The Song Remains The Same:" +
                        " 0,    Scored Probabilities for The Sound Of Music: 0,    Scored Probabilities f" +
                        "or The Thin Blue Line: 0,    Scored Probabilities for The Town: 0,    Scored Pro" +
                        "babilities for Toy Story: 0,    Scored Probabilities for West Side Story: 0,    " +
                        "Scored Probabilities for White Chicks: 0,    Scored Probabilities for Wrong Turn" +
                        ": 0.0843384502923977,    Scored Labels: Don\'t Knock Twice  ";
                    this.mUIScoredProbabilitiesfText4.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText4;
            }
        }
        
        public WinText UIScoredProbabilitiesfText5
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText5 == null))
                {
                    this.mUIScoredProbabilitiesfText5 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText5.SearchProperties[WinText.PropertyNames.Name] = "       Scored Probabilities for 12 Years A Slave: 0,    Scored Probabilities for " +
                        "2001: A Space Odyssey: 0,    Scored Probabilities for A Girl Walks Home Alone At" +
                        " Night: 0,    Scored Probabilities for Aliens: 0,    Scored Probabilities for Av" +
                        "engers: Infinity War: 0,    Scored Probabilities for Blade Runner: 0,    Scored " +
                        "Probabilities for Casablanca: 0,    Scored Probabilities for Chicago: 0,    Scor" +
                        "ed Probabilities for Citizen Kane: 0,    Scored Probabilities for City Of Angels" +
                        ": 0,    Scored Probabilities for Die Hard: 0.228937894834634,    Scored Probabil" +
                        "ities for Don\'t Knock Twice: 0,    Scored Probabilities for Dr. Doolittle: 0,   " +
                        " Scored Probabilities for Enough Said: 0,    Scored Probabilities for Four Weddi" +
                        "ngs And A Funeral: 0,    Scored Probabilities for Gimme Shelter: 0,    Scored Pr" +
                        "obabilities for Gone In 60 Seconds: 0.228069258639911,    Scored Probabilities f" +
                        "or Gravity: 0,    Scored Probabilities for Hairspray: 0,    Scored Probabilities" +
                        " for Hoop Dreams: 0,    Scored Probabilities for Interstellar: 0,    Scored Prob" +
                        "abilities for Lights Out: 0,    Scored Probabilities for Man On Wire: 0,    Scor" +
                        "ed Probabilities for Memento: 0,    Scored Probabilities for Metropolis: 0,    S" +
                        "cored Probabilities for Office Space: 0,    Scored Probabilities for Oldboy: 0, " +
                        "   Scored Probabilities for Passenger 57: 0.334619642635947,    Scored Probabili" +
                        "ties for Psycho: 0,    Scored Probabilities for Se7en: 0,    Scored Probabilitie" +
                        "s for Shine A Light: 0,    Scored Probabilities for Singin\' In The Rain: 0,    S" +
                        "cored Probabilities for Stop Making Sense: 0,    Scored Probabilities for The Ac" +
                        "t Of Killing: 0,    Scored Probabilities for The Cove: 0,    Scored Probabilitie" +
                        "s for The Fast  The Furious: 0.156273225566704,    Scored Probabilities for The " +
                        "Grudge: 0,    Scored Probabilities for The Last Waltz: 0,    Scored Probabilitie" +
                        "s for The Long Kiss Goodnight: 0.0520999783228044,    Scored Probabilities for T" +
                        "he Nutty Professor: 0,    Scored Probabilities for The Ring: 0,    Scored Probab" +
                        "ilities for The Silence Of The Lambs: 0,    Scored Probabilities for The Song Re" +
                        "mains The Same: 0,    Scored Probabilities for The Sound Of Music: 0,    Scored " +
                        "Probabilities for The Thin Blue Line: 0,    Scored Probabilities for The Town: 0" +
                        ",    Scored Probabilities for Toy Story: 0,    Scored Probabilities for West Sid" +
                        "e Story: 0,    Scored Probabilities for White Chicks: 0,    Scored Probabilities" +
                        " for Wrong Turn: 0,    Scored Labels: Passenger 57  ";
                    this.mUIScoredProbabilitiesfText5.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText5;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIScoredProbabilitiesfText;
        
        private WinText mUIIngendataersendttilmText;
        
        private WinText mUIScoredProbabilitiesfText1;
        
        private WinText mUIScoredProbabilitiesfText2;
        
        private WinText mUIScoredProbabilitiesfText3;
        
        private WinText mUIScoredProbabilitiesfText4;
        
        private WinText mUIScoredProbabilitiesfText5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIScoredProbabilitiesfWindow1 : WinWindow
    {
        
        public UIScoredProbabilitiesfWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lbGenre";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinText UIScoredProbabilitiesfText
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText == null))
                {
                    this.mUIScoredProbabilitiesfText = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText.SearchProperties[WinText.PropertyNames.Name] = @"       Scored Probabilities for Class Action: 0.0506129863474147,    Scored Probabilities for Class Animation: 0.00492610837438424,    Scored Probabilities for Class Comedy: 0.0126498920854986,    Scored Probabilities for Class Concert: 0.154040950250728,    Scored Probabilities for Class Documentary: 0.0633779116874155,    Scored Probabilities for Class Drama: 0.269961421557166,    Scored Probabilities for Class Horror: 0.118118804633621,    Scored Probabilities for Class Musical: 0.00550256786500367,    Scored Probabilities for Class Romantic: 0.131428161870946,    Scored Probabilities for Class Sci-Fi: 0,    Scored Probabilities for Class Thriller: 0.189381195327821,    Scored Labels: Drama  ";
                    this.mUIScoredProbabilitiesfText.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText;
            }
        }
        
        public WinText UIIngendataersendttilmText
        {
            get
            {
                if ((this.mUIIngendataersendttilmText == null))
                {
                    this.mUIIngendataersendttilmText = new WinText(this);
                    #region Search Criteria
                    this.mUIIngendataersendttilmText.SearchProperties[WinText.PropertyNames.Name] = "Ingen data er sendt til modellen endnu...";
                    this.mUIIngendataersendttilmText.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIIngendataersendttilmText;
            }
        }
        
        public WinText UIScoredProbabilitiesfText1
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText1 == null))
                {
                    this.mUIScoredProbabilitiesfText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText1.SearchProperties[WinText.PropertyNames.Name] = @"       Scored Probabilities for Class Action: 1,    Scored Probabilities for Class Animation: 0,    Scored Probabilities for Class Comedy: 0,    Scored Probabilities for Class Concert: 0,    Scored Probabilities for Class Documentary: 0,    Scored Probabilities for Class Drama: 0,    Scored Probabilities for Class Horror: 0,    Scored Probabilities for Class Musical: 0,    Scored Probabilities for Class Romantic: 0,    Scored Probabilities for Class Sci-Fi: 0,    Scored Probabilities for Class Thriller: 0,    Scored Labels: Action  ";
                    this.mUIScoredProbabilitiesfText1.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText1;
            }
        }
        
        public WinText UIScoredProbabilitiesfText2
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText2 == null))
                {
                    this.mUIScoredProbabilitiesfText2 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText2.SearchProperties[WinText.PropertyNames.Name] = @"       Scored Probabilities for  Action: 0.0506129863474147,    Scored Probabilities for  Animation: 0.00492610837438424,    Scored Probabilities for  Comedy: 0.0126498920854986,    Scored Probabilities for  Concert: 0.154040950250728,    Scored Probabilities for  Documentary: 0.0633779116874155,    Scored Probabilities for  Drama: 0.269961421557166,    Scored Probabilities for  Horror: 0.118118804633621,    Scored Probabilities for  Musical: 0.00550256786500367,    Scored Probabilities for  Romantic: 0.131428161870946,    Scored Probabilities for  Sci-Fi: 0,    Scored Probabilities for  Thriller: 0.189381195327821,    Scored Labels: Drama  ";
                    this.mUIScoredProbabilitiesfText2.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText2;
            }
        }
        
        public WinText UIScoredProbabilitiesfText3
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText3 == null))
                {
                    this.mUIScoredProbabilitiesfText3 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText3.SearchProperties[WinText.PropertyNames.Name] = @"       Scored Probabilities for Action: 0.0506129863474147,    Scored Probabilities for Animation: 0.00492610837438424,    Scored Probabilities for Comedy: 0.0126498920854986,    Scored Probabilities for Concert: 0.154040950250728,    Scored Probabilities for Documentary: 0.0633779116874155,    Scored Probabilities for Drama: 0.269961421557166,    Scored Probabilities for Horror: 0.118118804633621,    Scored Probabilities for Musical: 0.00550256786500367,    Scored Probabilities for Romantic: 0.131428161870946,    Scored Probabilities for Sci-Fi: 0,    Scored Probabilities for Thriller: 0.189381195327821,    Scored Labels: Drama  ";
                    this.mUIScoredProbabilitiesfText3.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText3;
            }
        }
        
        public WinText UIScoredProbabilitiesfText4
        {
            get
            {
                if ((this.mUIScoredProbabilitiesfText4 == null))
                {
                    this.mUIScoredProbabilitiesfText4 = new WinText(this);
                    #region Search Criteria
                    this.mUIScoredProbabilitiesfText4.SearchProperties[WinText.PropertyNames.Name] = @"       Scored Probabilities for Action: 1,    Scored Probabilities for Animation: 0,    Scored Probabilities for Comedy: 0,    Scored Probabilities for Concert: 0,    Scored Probabilities for Documentary: 0,    Scored Probabilities for Drama: 0,    Scored Probabilities for Horror: 0,    Scored Probabilities for Musical: 0,    Scored Probabilities for Romantic: 0,    Scored Probabilities for Sci-Fi: 0,    Scored Probabilities for Thriller: 0,    Scored Labels: Action  ";
                    this.mUIScoredProbabilitiesfText4.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIScoredProbabilitiesfText4;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIScoredProbabilitiesfText;
        
        private WinText mUIIngendataersendttilmText;
        
        private WinText mUIScoredProbabilitiesfText1;
        
        private WinText mUIScoredProbabilitiesfText2;
        
        private WinText mUIScoredProbabilitiesfText3;
        
        private WinText mUIScoredProbabilitiesfText4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINulstilWindow : WinWindow
    {
        
        public UINulstilWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnReset";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinButton UINulstilButton
        {
            get
            {
                if ((this.mUINulstilButton == null))
                {
                    this.mUINulstilButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINulstilButton.SearchProperties[WinButton.PropertyNames.Name] = "Nulstil";
                    this.mUINulstilButton.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUINulstilButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINulstilButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpdaterWindow : WinWindow
    {
        
        public UIOpdaterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnUpdate";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpdaterButton
        {
            get
            {
                if ((this.mUIOpdaterButton == null))
                {
                    this.mUIOpdaterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpdaterButton.SearchProperties[WinButton.PropertyNames.Name] = "Opdater";
                    this.mUIOpdaterButton.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIOpdaterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpdaterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelMovieWindow : WinWindow
    {
        
        public UIPanelMovieWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelMovie";
            this.WindowTitles.Add("Machine Learning");
            #endregion
        }
        
        #region Properties
        public WinClient UIIngendataersendttilmClient
        {
            get
            {
                if ((this.mUIIngendataersendttilmClient == null))
                {
                    this.mUIIngendataersendttilmClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIIngendataersendttilmClient.SearchProperties[WinControl.PropertyNames.Name] = "Ingen data er sendt til modellen endnu...";
                    this.mUIIngendataersendttilmClient.WindowTitles.Add("Machine Learning");
                    #endregion
                }
                return this.mUIIngendataersendttilmClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIIngendataersendttilmClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMp3tagv281CUsersHardWindow : WinWindow
    {
        
        public UIMp3tagv281CUsersHardWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Mp3tag v2.81  -  C:\\Users\\Hardy Drachmann\\Mp3tag\\";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "Afx:", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Mp3tag v2.81  -  C:\\Users\\Hardy Drachmann\\Mp3tag\\");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMp3tagv281CUsersHardTitleBar
        {
            get
            {
                if ((this.mUIMp3tagv281CUsersHardTitleBar == null))
                {
                    this.mUIMp3tagv281CUsersHardTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMp3tagv281CUsersHardTitleBar.WindowTitles.Add("Mp3tag v2.81  -  C:\\Users\\Hardy Drachmann\\Mp3tag\\");
                    #endregion
                }
                return this.mUIMp3tagv281CUsersHardTitleBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMp3tagv281CUsersHardTitleBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1109";
            this.WindowTitles.Add("Mp3tag v2.81  -  C:\\Users\\Hardy Drachmann\\Mp3tag\\");
            #endregion
        }
        
        #region Properties
        public WinComboBox UITitleComboBox
        {
            get
            {
                if ((this.mUITitleComboBox == null))
                {
                    this.mUITitleComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUITitleComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Title:";
                    this.mUITitleComboBox.WindowTitles.Add("Mp3tag v2.81  -  C:\\Users\\Hardy Drachmann\\Mp3tag\\");
                    #endregion
                }
                return this.mUITitleComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUITitleComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Mp3tag v2.81  -  C:\\Users\\Hardy Drachmann\\Mp3tag\\");
            #endregion
        }
        
        #region Properties
        public WinEdit UITitleEdit
        {
            get
            {
                if ((this.mUITitleEdit == null))
                {
                    this.mUITitleEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITitleEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Title:";
                    this.mUITitleEdit.WindowTitles.Add("Mp3tag v2.81  -  C:\\Users\\Hardy Drachmann\\Mp3tag\\");
                    #endregion
                }
                return this.mUITitleEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITitleEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMachineLearningMicroWindow : WpfWindow
    {
        
        public UIMachineLearningMicroWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MachineLearning - Microsoft Visual Studio ";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MachineLearning - Microsoft Visual Studio ");
            #endregion
        }
        
        #region Properties
        public UITabGroupST003ae79031TabList UITabGroupST003ae79031TabList
        {
            get
            {
                if ((this.mUITabGroupST003ae79031TabList == null))
                {
                    this.mUITabGroupST003ae79031TabList = new UITabGroupST003ae79031TabList(this);
                }
                return this.mUITabGroupST003ae79031TabList;
            }
        }
        #endregion
        
        #region Fields
        private UITabGroupST003ae79031TabList mUITabGroupST003ae79031TabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabGroupST003ae79031TabList : WpfTabList
    {
        
        public UITabGroupST003ae79031TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabGroup|ST:0:0:{3ae79031-e1bc-11d0-8f78-00a0c9110057}|ST:0:0:{131369f2-062d-44a2" +
                "-8671-91ff31efb4f4}|ST:0:0:{c93a910a-0fa6-4307-93a4-f2bd61ec7828}";
            this.WindowTitles.Add("MachineLearning - Microsoft Visual Studio ");
            #endregion
        }
        
        #region Properties
        public UISolutionExplorerPane UISolutionExplorerPane
        {
            get
            {
                if ((this.mUISolutionExplorerPane == null))
                {
                    this.mUISolutionExplorerPane = new UISolutionExplorerPane(this);
                }
                return this.mUISolutionExplorerPane;
            }
        }
        #endregion
        
        #region Fields
        private UISolutionExplorerPane mUISolutionExplorerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISolutionExplorerPane : WpfPane
    {
        
        public UISolutionExplorerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.GenericPane";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "Solution Explorer";
            this.WindowTitles.Add("MachineLearning - Microsoft Visual Studio ");
            #endregion
        }
        
        #region Properties
        public WpfTree UISolutionExplorerTree
        {
            get
            {
                if ((this.mUISolutionExplorerTree == null))
                {
                    this.mUISolutionExplorerTree = new WpfTree(this);
                    #region Search Criteria
                    this.mUISolutionExplorerTree.SearchProperties[WpfTree.PropertyNames.AutomationId] = "SolutionExplorer";
                    this.mUISolutionExplorerTree.WindowTitles.Add("MachineLearning - Microsoft Visual Studio ");
                    #endregion
                }
                return this.mUISolutionExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfTree mUISolutionExplorerTree;
        #endregion
    }
}
